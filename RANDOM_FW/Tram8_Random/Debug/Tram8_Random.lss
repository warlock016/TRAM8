
Tram8_Random.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000100a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  0000100a  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008000e6  008000e6  00001124  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000001e0  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000022f4  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000e9a  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00003112  00000000  00000000  000044f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  0000036c  00000000  00000000  00007608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000d10  00000000  00000000  00007974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00001571  00000000  00000000  00008684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000002f8  00000000  00000000  00009bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	53 c1       	rjmp	.+678    	; 0x2b4 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	9b c1       	rjmp	.+822    	; 0x34e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0

00000034 <.Loc.1>:
      34:	a0 e6       	ldi	r26, 0x60	; 96

00000036 <.Loc.2>:
      36:	b0 e0       	ldi	r27, 0x00	; 0

00000038 <.Loc.3>:
      38:	ea e0       	ldi	r30, 0x0A	; 10

0000003a <.Loc.4>:
      3a:	f0 e1       	ldi	r31, 0x10	; 16

0000003c <.Loc.5>:
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.L__do_copy_data_start>

0000003e <.L__do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+

00000040 <.Loc.7>:
      40:	0d 92       	st	X+, r0

00000042 <.L__do_copy_data_start>:
      42:	a6 3e       	cpi	r26, 0xE6	; 230

00000044 <.Loc.9>:
      44:	b1 07       	cpc	r27, r17

00000046 <.Loc.10>:
      46:	d9 f7       	brne	.-10     	; 0x3e <.L__do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1

0000004a <.Loc.1>:
      4a:	a6 ee       	ldi	r26, 0xE6	; 230

0000004c <.Loc.2>:
      4c:	b0 e0       	ldi	r27, 0x00	; 0

0000004e <.Loc.3>:
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.Loc.5>

00000050 <.Loc.4>:
      50:	1d 92       	st	X+, r1

00000052 <.Loc.5>:
      52:	ae 33       	cpi	r26, 0x3E	; 62

00000054 <.Loc.6>:
      54:	b2 07       	cpc	r27, r18

00000056 <.Loc.7>:
      56:	e1 f7       	brne	.-8      	; 0x50 <.Loc.4>

00000058 <L0^A>:
      58:	07 d3       	rcall	.+1550   	; 0x668 <main>
      5a:	b1 c7       	rjmp	.+3938   	; 0xfbe <_exit>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <TWI_WRITE_BULK>:
		return 1;
	
}


uint8_t TWI_WRITE_BULK(uint8_t ICAddr, uint8_t Offset, uint8_t Length, uint8_t (*Filldata)[]){
      5e:	a2 2f       	mov	r26, r18
      60:	b3 2f       	mov	r27, r19

00000062 <.Loc.295>:
			
		uint8_t Returnval = 0;
		
		TWSR=0;					//prescaler = 1 = (4^0)
      62:	11 b8       	out	0x01, r1	; 1

00000064 <.Loc.298>:
		TWBR=TW_Bautrate;
      64:	9c e0       	ldi	r25, 0x0C	; 12
      66:	90 b9       	out	0x00, r25	; 0

00000068 <.Loc.300>:
		
		//STOP
		TWCR=TWCR_STOP;
      68:	94 e9       	ldi	r25, 0x94	; 148
      6a:	96 bf       	out	0x36, r25	; 54

0000006c <.Loc.302>:

		
		/****Start ****/
		TWCR=TWCR_START;
      6c:	94 ea       	ldi	r25, 0xA4	; 164
      6e:	96 bf       	out	0x36, r25	; 54

00000070 <.L71>:
		while (!(TWCR & (1<<TWINT)))
      70:	06 b6       	in	r0, 0x36	; 54
      72:	07 fe       	sbrs	r0, 7
      74:	fd cf       	rjmp	.-6      	; 0x70 <.L71>

00000076 <.Loc.307>:
		{
			//warten bis interupt-flag gesetzt ist
		}
		if (TW_STATUS!=TW_START)
      76:	91 b1       	in	r25, 0x01	; 1

00000078 <.Loc.309>:
      78:	98 7f       	andi	r25, 0xF8	; 248
      7a:	98 30       	cpi	r25, 0x08	; 8
      7c:	79 f5       	brne	.+94     	; 0xdc <.L88>

0000007e <.Loc.310>:

		


		/****Adresse ****/
		TWDR=	ICAddr | TW_WRITE;					//Adresse  write
      7e:	83 b9       	out	0x03, r24	; 3

00000080 <.Loc.312>:
		TWCR=TWCR_SEND;
      80:	84 e8       	ldi	r24, 0x84	; 132

00000082 <.LVL41>:
      82:	86 bf       	out	0x36, r24	; 54

00000084 <.L74>:
		while (!(TWCR & (1<<TWINT)))
      84:	06 b6       	in	r0, 0x36	; 54
      86:	07 fe       	sbrs	r0, 7
      88:	fd cf       	rjmp	.-6      	; 0x84 <.L74>

0000008a <.Loc.318>:
		{
			//warten bis interupt-flag gesetzt ist
		}
		if (TW_STATUS!=TW_MT_SLA_ACK)
      8a:	81 b1       	in	r24, 0x01	; 1

0000008c <.Loc.320>:
      8c:	88 7f       	andi	r24, 0xF8	; 248
      8e:	88 31       	cpi	r24, 0x18	; 24
      90:	49 f5       	brne	.+82     	; 0xe4 <.L89>

00000092 <.Loc.321>:
			return 0;
		}
		
		
		/****Auswahl Register + auto increment=0****/
		TWDR=Offset;
      92:	63 b9       	out	0x03, r22	; 3

00000094 <.Loc.323>:
		TWCR=TWCR_SEND;
      94:	84 e8       	ldi	r24, 0x84	; 132
      96:	86 bf       	out	0x36, r24	; 54

00000098 <.L76>:
		while (!(TWCR & (1<<TWINT)))
      98:	06 b6       	in	r0, 0x36	; 54
      9a:	07 fe       	sbrs	r0, 7
      9c:	fd cf       	rjmp	.-6      	; 0x98 <.L76>

0000009e <.Loc.328>:
		{
			//warten bis interupt-flag gesetzt ist
		}
		//Ueberpruefen, ob Daten angekommen sind
		if (TW_STATUS!=TW_MT_DATA_ACK)
      9e:	81 b1       	in	r24, 0x01	; 1

000000a0 <.Loc.330>:
      a0:	88 7f       	andi	r24, 0xF8	; 248
      a2:	88 32       	cpi	r24, 0x28	; 40
      a4:	19 f5       	brne	.+70     	; 0xec <.L77>

000000a6 <.LVL43>:
		}
		
		
		uint8_t i = 0;
		
		for (i=0;i<Length;i++){
      a6:	44 23       	and	r20, r20
      a8:	a9 f0       	breq	.+42     	; 0xd4 <.L79>
      aa:	fd 01       	movw	r30, r26
      ac:	9d 01       	movw	r18, r26

000000ae <.LVL44>:
      ae:	2f 5f       	subi	r18, 0xFF	; 255
      b0:	3f 4f       	sbci	r19, 0xFF	; 255
      b2:	41 50       	subi	r20, 0x01	; 1

000000b4 <.LVL45>:
      b4:	24 0f       	add	r18, r20
      b6:	31 1d       	adc	r19, r1

000000b8 <.Loc.335>:
			/****Übertragen Wert****/
			TWDR = (*Filldata)[i];
			TWCR=TWCR_SEND;
      b8:	94 e8       	ldi	r25, 0x84	; 132

000000ba <.L82>:
			TWDR = (*Filldata)[i];
      ba:	81 91       	ld	r24, Z+

000000bc <.LVL47>:
      bc:	83 b9       	out	0x03, r24	; 3

000000be <.Loc.339>:
			TWCR=TWCR_SEND;
      be:	96 bf       	out	0x36, r25	; 54

000000c0 <.L80>:
			while (!(TWCR & (1<<TWINT)))
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <.L80>

000000c6 <.Loc.344>:
			{
				//warten bis interupt-flag gesetzt ist
			}
			//Ueberpruefen, ob Daten angekommen sind
			if (TW_STATUS!=TW_MT_DATA_ACK)
      c6:	81 b1       	in	r24, 0x01	; 1

000000c8 <.Loc.346>:
      c8:	88 7f       	andi	r24, 0xF8	; 248
      ca:	88 32       	cpi	r24, 0x28	; 40
      cc:	99 f4       	brne	.+38     	; 0xf4 <.L90>

000000ce <.LVL48>:
		for (i=0;i<Length;i++){
      ce:	e2 17       	cp	r30, r18
      d0:	f3 07       	cpc	r31, r19
      d2:	99 f7       	brne	.-26     	; 0xba <.L82>

000000d4 <.L79>:
			
		}
		
	
		//STOP
		TWCR=TWCR_STOP;
      d4:	84 e9       	ldi	r24, 0x94	; 148
      d6:	86 bf       	out	0x36, r24	; 54

000000d8 <.Loc.352>:

		return 1;
      d8:	81 e0       	ldi	r24, 0x01	; 1

000000da <.Loc.354>:
	
	
	
		return 0;
}
      da:	08 95       	ret

000000dc <.L88>:

void TWI_ERROR(void){
	
		TWCR=TWCR_STOP;
      dc:	84 e9       	ldi	r24, 0x94	; 148

000000de <.LVL51>:
      de:	86 bf       	out	0x36, r24	; 54

000000e0 <.LBE50>:
			return 0;
      e0:	80 e0       	ldi	r24, 0x00	; 0

000000e2 <.LBB53>:
		
	#ifdef MY_DEBUG
		printf("TWI Error - Status Byte: %x \n",TW_STATUS);	
	#endif
	
	return;
      e2:	08 95       	ret

000000e4 <.L89>:
		TWCR=TWCR_STOP;
      e4:	84 e9       	ldi	r24, 0x94	; 148
      e6:	86 bf       	out	0x36, r24	; 54

000000e8 <.LBE54>:
			return 0;
      e8:	80 e0       	ldi	r24, 0x00	; 0

000000ea <.LBB57>:
	return;
      ea:	08 95       	ret

000000ec <.L77>:
		TWCR=TWCR_STOP;
      ec:	84 e9       	ldi	r24, 0x94	; 148
      ee:	86 bf       	out	0x36, r24	; 54

000000f0 <.LBE58>:
			return 0;
      f0:	80 e0       	ldi	r24, 0x00	; 0

000000f2 <.LBB61>:
	return;
      f2:	08 95       	ret

000000f4 <.L90>:
		TWCR=TWCR_STOP;
      f4:	84 e9       	ldi	r24, 0x94	; 148
      f6:	86 bf       	out	0x36, r24	; 54

000000f8 <.LBE62>:
				return 0;
      f8:	80 e0       	ldi	r24, 0x00	; 0

000000fa <.LBB65>:
	return;
      fa:	08 95       	ret

000000fc <set_pin_inv>:
}

void set_pin_inv(uint8_t pinnr)
{
	// inverted cos of 74HC1G14 inverter
	switch (pinnr)
      fc:	88 30       	cpi	r24, 0x08	; 8
      fe:	a0 f4       	brcc	.+40     	; 0x128 <.L1>
     100:	e8 2f       	mov	r30, r24
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	ef 51       	subi	r30, 0x1F	; 31
     106:	f8 4f       	sbci	r31, 0xF8	; 248
     108:	09 94       	ijmp

0000010a <.L11>:
	{
	case 0:
		PORTB &= 0xFE;
     10a:	c0 98       	cbi	0x18, 0	; 24

0000010c <.Loc.4>:
		break;
     10c:	08 95       	ret

0000010e <.L10>:
	case 1:
		PORTD &= 0xFD;
     10e:	91 98       	cbi	0x12, 1	; 18

00000110 <.Loc.7>:
		break;
     110:	08 95       	ret

00000112 <.L9>:
	case 2:
		PORTD &= 0xFB;
     112:	92 98       	cbi	0x12, 2	; 18

00000114 <.Loc.10>:
		break;
     114:	08 95       	ret

00000116 <.L8>:
	case 3:
		PORTD &= 0xF7;
     116:	93 98       	cbi	0x12, 3	; 18

00000118 <.Loc.13>:
		break;
     118:	08 95       	ret

0000011a <.L7>:
	case 4:
		PORTD &= 0xEF;
     11a:	94 98       	cbi	0x12, 4	; 18

0000011c <.Loc.16>:
		break;
     11c:	08 95       	ret

0000011e <.L6>:
	case 5:
		PORTD &= 0xDF;
     11e:	95 98       	cbi	0x12, 5	; 18

00000120 <.Loc.19>:
		break;
     120:	08 95       	ret

00000122 <.L5>:
	case 6:
		PORTD &= 0xBF;
     122:	96 98       	cbi	0x12, 6	; 18

00000124 <.Loc.22>:
		break;
     124:	08 95       	ret

00000126 <.L3>:
	case 7:
		PORTD &= 0x7F;
     126:	97 98       	cbi	0x12, 7	; 18

00000128 <.L1>:
	default:
		break;
	}

	return;
}
     128:	08 95       	ret

0000012a <clear_pin_inv>:

void clear_pin_inv(uint8_t pinnr)
{
	switch (pinnr)
     12a:	88 30       	cpi	r24, 0x08	; 8
     12c:	a0 f4       	brcc	.+40     	; 0x156 <.L12>
     12e:	e8 2f       	mov	r30, r24
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	e7 51       	subi	r30, 0x17	; 23
     134:	f8 4f       	sbci	r31, 0xF8	; 248
     136:	09 94       	ijmp

00000138 <.L22>:
	{
	case 0:
		PORTB |= 0x01;
     138:	c0 9a       	sbi	0x18, 0	; 24

0000013a <.Loc.32>:
		break;
     13a:	08 95       	ret

0000013c <.L21>:
	case 1:
		PORTD |= 0x02;
     13c:	91 9a       	sbi	0x12, 1	; 18

0000013e <.Loc.35>:
		break;
     13e:	08 95       	ret

00000140 <.L20>:
	case 2:
		PORTD |= 0x04;
     140:	92 9a       	sbi	0x12, 2	; 18

00000142 <.Loc.38>:
		break;
     142:	08 95       	ret

00000144 <.L19>:
	case 3:
		PORTD |= 0x08;
     144:	93 9a       	sbi	0x12, 3	; 18

00000146 <.Loc.41>:
		break;
     146:	08 95       	ret

00000148 <.L18>:
	case 4:
		PORTD |= 0x10;
     148:	94 9a       	sbi	0x12, 4	; 18

0000014a <.Loc.44>:
		break;
     14a:	08 95       	ret

0000014c <.L17>:
	case 5:
		PORTD |= 0x20;
     14c:	95 9a       	sbi	0x12, 5	; 18

0000014e <.Loc.47>:
		break;
     14e:	08 95       	ret

00000150 <.L16>:
	case 6:
		PORTD |= 0x40;
     150:	96 9a       	sbi	0x12, 6	; 18

00000152 <.Loc.50>:
		break;
     152:	08 95       	ret

00000154 <.L14>:
	case 7:
		PORTD |= 0x80;
     154:	97 9a       	sbi	0x12, 7	; 18

00000156 <.L12>:
	default:
		break;
	}

	return;
}
     156:	08 95       	ret

00000158 <note_off>:
}

midi_event_callback_t note_off(char chan, char data1, char data2)
{
	
	if(active_chan[chan] == NULL) return; // wrong channel
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	ee 0f       	add	r30, r30
     15e:	ff 1f       	adc	r31, r31
     160:	ec 50       	subi	r30, 0x0C	; 12
     162:	ff 4f       	sbci	r31, 0xFF	; 255
     164:	01 90       	ld	r0, Z+
     166:	f0 81       	ld	r31, Z
     168:	e0 2d       	mov	r30, r0

0000016a <.Loc.59>:
     16a:	30 97       	sbiw	r30, 0x00	; 0
     16c:	b9 f0       	breq	.+46     	; 0x19c <.L24>

0000016e <.Loc.60>:
	if(active_chan[chan]->note_count <= 0) return; // no notes
     16e:	20 81       	ld	r18, Z

00000170 <.Loc.62>:
     170:	22 23       	and	r18, r18
     172:	a1 f0       	breq	.+40     	; 0x19c <.L24>

00000174 <.Loc.63>:

	active_chan[chan]->note_count--;
     174:	21 50       	subi	r18, 0x01	; 1
     176:	20 83       	st	Z, r18

00000178 <.Loc.65>:
	
	uint8_t pos = active_chan[chan]->note_count % active_chan[chan]->max_num_notes + active_chan[chan]->dac_offset;
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25

0000017c <.LVL3>:
     17c:	fc 01       	movw	r30, r24
     17e:	ec 50       	subi	r30, 0x0C	; 12
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	01 90       	ld	r0, Z+
     184:	f0 81       	ld	r31, Z
     186:	e0 2d       	mov	r30, r0

00000188 <.LVL4>:
     188:	80 81       	ld	r24, Z
     18a:	62 81       	ldd	r22, Z+2	; 0x02

0000018c <.LVL5>:
     18c:	bb d5       	rcall	.+2934   	; 0xd04 <__udivmodqi4>

0000018e <.Loc.71>:
     18e:	81 81       	ldd	r24, Z+1	; 0x01

00000190 <.Loc.72>:
	(*clear_pin_ptr)(pos);
     190:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     194:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>

00000198 <.LVL6>:
     198:	89 0f       	add	r24, r25

0000019a <.LVL7>:
     19a:	09 95       	icall

0000019c <.L24>:
	return;
}
     19c:	08 95       	ret

0000019e <cont>:
	if(!midi_clock_run)
     19e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <midi_clock_run>

000001a2 <.LVL10>:
     1a2:	81 11       	cpse	r24, r1

000001a4 <.L26>:
}
     1a4:	08 95       	ret

000001a6 <.LVL12>:
		max5825_set_load_channel(0, 0xFFFF);
     1a6:	6f ef       	ldi	r22, 0xFF	; 255
     1a8:	7f ef       	ldi	r23, 0xFF	; 255

000001aa <.LVL13>:
     1aa:	af d2       	rcall	.+1374   	; 0x70a <max5825_set_load_channel>

000001ac <.LVL14>:
		midi_clock_run = 1;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <midi_clock_run>
     1b2:	f8 cf       	rjmp	.-16     	; 0x1a4 <.L26>

000001b4 <note_on>:

midi_event_callback_t note_on(char chan, char data1, char data2)
{
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	26 2f       	mov	r18, r22

000001bc <.Loc.89>:
	if(active_chan[chan] == NULL) return; // channel not registered
     1bc:	c8 2f       	mov	r28, r24
     1be:	d0 e0       	ldi	r29, 0x00	; 0
     1c0:	fe 01       	movw	r30, r28
     1c2:	ee 0f       	add	r30, r30
     1c4:	ff 1f       	adc	r31, r31
     1c6:	ec 50       	subi	r30, 0x0C	; 12
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	01 90       	ld	r0, Z+
     1cc:	f0 81       	ld	r31, Z
     1ce:	e0 2d       	mov	r30, r0

000001d0 <.Loc.91>:
     1d0:	30 97       	sbiw	r30, 0x00	; 0
     1d2:	81 f1       	breq	.+96     	; 0x234 <.L29>

000001d4 <.Loc.92>:

	if(data2 == 0) // midi note off message with velocity "0"
     1d4:	44 23       	and	r20, r20
     1d6:	91 f1       	breq	.+100    	; 0x23c <.L33>

000001d8 <.Loc.94>:
	{
		note_off(chan, data1, data2);
		return;
	}
	
	uint8_t dac_pos = (active_chan[chan]->note_count % active_chan[chan]->max_num_notes) + active_chan[chan]->dac_offset;
     1d8:	80 81       	ld	r24, Z

000001da <.LVL16>:
     1da:	62 81       	ldd	r22, Z+2	; 0x02

000001dc <.LVL17>:
     1dc:	93 d5       	rcall	.+2854   	; 0xd04 <__udivmodqi4>

000001de <.Loc.98>:
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	19 2f       	mov	r17, r25
     1e2:	18 0f       	add	r17, r24

000001e4 <.LVL18>:
	int8_t voct_pos = data1 - active_chan[chan]->midi_note_offset;
     1e4:	87 85       	ldd	r24, Z+15	; 0x0f
     1e6:	62 2f       	mov	r22, r18
     1e8:	68 1b       	sub	r22, r24

000001ea <.LVL19>:

	if(voct_pos < active_chan[chan]->midi_note_min)
     1ea:	85 85       	ldd	r24, Z+13	; 0x0d

000001ec <.Loc.103>:
     1ec:	68 17       	cp	r22, r24
     1ee:	24 f0       	brlt	.+8      	; 0x1f8 <.L31>

000001f0 <.Loc.104>:
	{
		voct_pos = active_chan[chan]->midi_note_min;
	}
	else if (voct_pos > active_chan[chan]->midi_note_max)
     1f0:	86 85       	ldd	r24, Z+14	; 0x0e
     1f2:	68 17       	cp	r22, r24
     1f4:	0c f4       	brge	.+2      	; 0x1f8 <.L31>
     1f6:	86 2f       	mov	r24, r22

000001f8 <.L31>:
	{
		voct_pos = active_chan[chan]->midi_note_max;
	}

	uint16_t dac_val = voct_lookup[voct_pos] << 4; // retrieve dac value for respective note
     1f8:	e8 2f       	mov	r30, r24
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 0b       	sbc	r31, r31
     1fe:	e4 59       	subi	r30, 0x94	; 148
     200:	ff 4f       	sbci	r31, 0xFF	; 255

00000202 <.Loc.108>:
     202:	60 81       	ld	r22, Z
     204:	71 81       	ldd	r23, Z+1	; 0x01
     206:	62 95       	swap	r22
     208:	72 95       	swap	r23
     20a:	70 7f       	andi	r23, 0xF0	; 240
     20c:	76 27       	eor	r23, r22
     20e:	60 7f       	andi	r22, 0xF0	; 240
     210:	76 27       	eor	r23, r22

00000212 <.Loc.109>:

	max5825_set_load_channel(dac_pos, dac_val); // set dac first
     212:	81 2f       	mov	r24, r17

00000214 <.LVL21>:
     214:	7a d2       	rcall	.+1268   	; 0x70a <max5825_set_load_channel>

00000216 <.LVL22>:
	(*set_pin_ptr)(dac_pos); // set gate next
     216:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <set_pin_ptr>
     21a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <set_pin_ptr+0x1>
     21e:	81 2f       	mov	r24, r17
     220:	09 95       	icall

00000222 <.LVL23>:

	active_chan[chan]->note_count++;
     222:	cc 0f       	add	r28, r28
     224:	dd 1f       	adc	r29, r29

00000226 <.LVL24>:
     226:	cc 50       	subi	r28, 0x0C	; 12
     228:	df 4f       	sbci	r29, 0xFF	; 255
     22a:	e8 81       	ld	r30, Y
     22c:	f9 81       	ldd	r31, Y+1	; 0x01

0000022e <.Loc.116>:
     22e:	80 81       	ld	r24, Z
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	80 83       	st	Z, r24

00000234 <.L29>:
	return;
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	08 95       	ret

0000023c <.L33>:
		note_off(chan, data1, data2);
     23c:	8d df       	rcall	.-230    	; 0x158 <note_off>

0000023e <.LVL27>:
		return;
     23e:	fa cf       	rjmp	.-12     	; 0x234 <.L29>

00000240 <tram8_init>:
	(*clear_pin_ptr)(PIN_A);
     240:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     244:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	09 95       	icall

0000024c <.LVL28>:
	(*clear_pin_ptr)(PIN_B);
     24c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     250:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	09 95       	icall

00000258 <.LVL29>:
	(*clear_pin_ptr)(PIN_C);
     258:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     25c:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	09 95       	icall

00000264 <.LVL30>:
	(*clear_pin_ptr)(PIN_D);
     264:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     268:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	09 95       	icall

00000270 <.LVL31>:
	(*clear_pin_ptr)(PIN_E);
     270:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     274:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     278:	84 e0       	ldi	r24, 0x04	; 4
     27a:	09 95       	icall

0000027c <.LVL32>:
	(*clear_pin_ptr)(PIN_F);
     27c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     280:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	09 95       	icall

00000288 <.LVL33>:
	(*clear_pin_ptr)(PIN_H);
     288:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     28c:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     290:	87 e0       	ldi	r24, 0x07	; 7
     292:	09 95       	icall

00000294 <.LVL34>:
	(*clear_pin_ptr)(PIN_G);
     294:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     298:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	09 95       	icall

000002a0 <.LBB20>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	89 e6       	ldi	r24, 0x69	; 105
     2a4:	98 e1       	ldi	r25, 0x18	; 24

000002a6 <.L1^B1>:
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <.L1^B1>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <L0^A>

000002b0 <L0^A>:
	...

000002b2 <.LBE23>:
}
     2b2:	08 95       	ret

000002b4 <__vector_6>:
{
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	2f 93       	push	r18
     2c4:	3f 93       	push	r19
     2c6:	4f 93       	push	r20
     2c8:	5f 93       	push	r21
     2ca:	6f 93       	push	r22
     2cc:	7f 93       	push	r23
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	af 93       	push	r26
     2d4:	bf 93       	push	r27
     2d6:	cf 93       	push	r28
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31

000002dc <.Loc.159>:
	TCCR1B = 0;			  // stop timer
     2dc:	1e bc       	out	0x2e, r1	; 46

000002de <.Loc.161>:
	TIFR |= (1 << OCF1A); // reset flag
     2de:	88 b7       	in	r24, 0x38	; 56
     2e0:	80 61       	ori	r24, 0x10	; 16
     2e2:	88 bf       	out	0x38, r24	; 56

000002e4 <.LBB24>:
	for (char i = 0; i < maxSlots; ++i)
     2e4:	0c ee       	ldi	r16, 0xEC	; 236
     2e6:	10 e0       	ldi	r17, 0x00	; 0

000002e8 <.Loc.166>:
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <.L37>

000002ec <.L36>:
     2ec:	cf 5f       	subi	r28, 0xFF	; 255

000002ee <.Loc.168>:
     2ee:	c8 30       	cpi	r28, 0x08	; 8
     2f0:	79 f0       	breq	.+30     	; 0x310 <.L40>

000002f2 <.L37>:
		if (pulse_reset_flag[i]) // array with flags for all digital pins -> upper row of jacks on tram8
     2f2:	f8 01       	movw	r30, r16
     2f4:	81 91       	ld	r24, Z+
     2f6:	8f 01       	movw	r16, r30

000002f8 <.Loc.172>:
     2f8:	88 23       	and	r24, r24
     2fa:	c1 f3       	breq	.-16     	; 0x2ec <.L36>

000002fc <.Loc.173>:
			(*clear_pin_ptr)(i);
     2fc:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <clear_pin_ptr>
     300:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <clear_pin_ptr+0x1>
     304:	8c 2f       	mov	r24, r28
     306:	09 95       	icall

00000308 <.LVL41>:
			pulse_reset_flag[i] = 0;
     308:	f8 01       	movw	r30, r16
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	10 82       	st	Z, r1
     30e:	ee cf       	rjmp	.-36     	; 0x2ec <.L36>

00000310 <.L40>:
	if (clk_stop_pulse)
     310:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <clk_stop_pulse>
     314:	81 11       	cpse	r24, r1
     316:	14 c0       	rjmp	.+40     	; 0x340 <.L41>

00000318 <.L35>:
}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	cf 91       	pop	r28

0000031e <.LVL42>:
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <.L41>:
		max5825_set_load_channel(1, 0x0);
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	e1 d1       	rcall	.+962    	; 0x70a <max5825_set_load_channel>

00000348 <.LVL44>:
		clk_stop_pulse = 0;
     348:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <clk_stop_pulse>

0000034c <.Loc.185>:
}
     34c:	e5 cf       	rjmp	.-54     	; 0x318 <.L35>

0000034e <__vector_11>:
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31

00000370 <.Loc.187>:
	uint8_t byte = UDR;
     370:	8c b1       	in	r24, 0x0c	; 12

00000372 <.LVL45>:
	midi_receive_byte(byte);
     372:	07 d2       	rcall	.+1038   	; 0x782 <midi_receive_byte>

00000374 <.LVL46>:
}
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	bf 91       	pop	r27
     37a:	af 91       	pop	r26
     37c:	9f 91       	pop	r25
     37e:	8f 91       	pop	r24
     380:	7f 91       	pop	r23
     382:	6f 91       	pop	r22
     384:	5f 91       	pop	r21
     386:	4f 91       	pop	r20
     388:	3f 91       	pop	r19
     38a:	2f 91       	pop	r18
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <set_LED>:
	if (var == ENABLE)
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	11 f0       	breq	.+4      	; 0x39e <.L51>

0000039a <.Loc.205>:
		DDRC &= 0xFF ^ (1 << LED_pin);
     39a:	a0 98       	cbi	0x14, 0	; 20

0000039c <.Loc.207>:
}
     39c:	08 95       	ret

0000039e <.L51>:
		DDRC |= (1 << LED_pin);
     39e:	a0 9a       	sbi	0x14, 0	; 20
     3a0:	08 95       	ret

000003a2 <tram8_cfg>:
	DDRC = 0x0C | (1 << LED_pin) | (1 << BUTTON_PIN); // LDAC & CLEAR & LED
     3a2:	8f e0       	ldi	r24, 0x0F	; 15
     3a4:	84 bb       	out	0x14, r24	; 20

000003a6 <.Loc.214>:
	DDRB |= (1 << PB0);								  // Trigger Out 0
     3a6:	b8 9a       	sbi	0x17, 0	; 23

000003a8 <.Loc.216>:
	DDRD |= 0xFE;									  // Trigger outs 1-7
     3a8:	81 b3       	in	r24, 0x11	; 17
     3aa:	8e 6f       	ori	r24, 0xFE	; 254
     3ac:	81 bb       	out	0x11, r24	; 17

000003ae <.Loc.218>:
	PORTD &= 0x01; // ALL GATES LOW (Inverter Out)
     3ae:	82 b3       	in	r24, 0x12	; 18
     3b0:	81 70       	andi	r24, 0x01	; 1
     3b2:	82 bb       	out	0x12, r24	; 18

000003b4 <.Loc.220>:
	PORTB &= 0xFE; //
     3b4:	c0 98       	cbi	0x18, 0	; 24

000003b6 <.Loc.222>:
	set_LED(ENABLE);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	ee df       	rcall	.-36     	; 0x396 <set_LED>

000003ba <.LBB25>:
     3ba:	2f ef       	ldi	r18, 0xFF	; 255
     3bc:	85 ea       	ldi	r24, 0xA5	; 165
     3be:	9e e0       	ldi	r25, 0x0E	; 14

000003c0 <.L1^B2>:
     3c0:	21 50       	subi	r18, 0x01	; 1
     3c2:	80 40       	sbci	r24, 0x00	; 0
     3c4:	90 40       	sbci	r25, 0x00	; 0
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.L1^B2>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <L0^A>

000003ca <L0^A>:
	...

000003cc <.LBE28>:
	set_LED(DISABLE);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	e3 df       	rcall	.-58     	; 0x396 <set_LED>

000003d0 <.L53>:
	} while (!eeprom_is_ready());
     3d0:	e1 99       	sbic	0x1c, 1	; 28
     3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <.L53>

000003d4 <.Loc.240>:
	buttonfix_flag = eeprom_read_byte(BUTTONFIXVARIABLE);
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	ea d5       	rcall	.+3028   	; 0xfae <eeprom_read_byte>

000003da <.LVL52>:
	if (buttonfix_flag == 0xAA)
     3da:	8a 3a       	cpi	r24, 0xAA	; 170
     3dc:	79 f1       	breq	.+94     	; 0x43c <.L64>

000003de <.L54>:
	TCCR2 = (1 << WGM20) | (0 << WGM21) | (0b111 << CS20); // CTC, PORT disconnected, /1024
     3de:	87 e4       	ldi	r24, 0x47	; 71

000003e0 <.LVL53>:
     3e0:	85 bd       	out	0x25, r24	; 37

000003e2 <.Loc.247>:
	OCR2 = 157;											   // ca. 10ms@16MHz
     3e2:	8d e9       	ldi	r24, 0x9D	; 157
     3e4:	83 bd       	out	0x23, r24	; 35

000003e6 <.Loc.249>:
	UCSRB = (1 << RXCIE) | (1 << RXEN);
     3e6:	80 e9       	ldi	r24, 0x90	; 144
     3e8:	8a b9       	out	0x0a, r24	; 10

000003ea <.Loc.251>:
	UCSRC = (1 << UCSZ0) | (1 << UCSZ1);
     3ea:	86 e0       	ldi	r24, 0x06	; 6
     3ec:	80 bd       	out	0x20, r24	; 32

000003ee <.Loc.253>:
	UBRRH = (unsigned char)(MYUBRR >> 8);
     3ee:	10 bc       	out	0x20, r1	; 32

000003f0 <.Loc.255>:
	UBRRL = (unsigned char)MYUBRR;
     3f0:	8f e1       	ldi	r24, 0x1F	; 31
     3f2:	89 b9       	out	0x09, r24	; 9

000003f4 <.L55>:
	} while (!eeprom_is_ready());
     3f4:	e1 99       	sbic	0x1c, 1	; 28
     3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <.L55>

000003f8 <.L56>:
	} while (!eeprom_is_ready());
     3f8:	e1 99       	sbic	0x1c, 1	; 28
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <.L56>

000003fc <.L57>:
	} while (!eeprom_is_ready());
     3fc:	e1 99       	sbic	0x1c, 1	; 28
     3fe:	fe cf       	rjmp	.-4      	; 0x3fc <.L57>

00000400 <.Loc.269>:
	PORTC = (1 << PC2) | (1 << PC3);
     400:	8c e0       	ldi	r24, 0x0C	; 12
     402:	85 bb       	out	0x15, r24	; 21

00000404 <.Loc.271>:
	DDRC |= (1 << PC2) | (1 << PC3);
     404:	84 b3       	in	r24, 0x14	; 20
     406:	8c 60       	ori	r24, 0x0C	; 12
     408:	84 bb       	out	0x14, r24	; 20

0000040a <.Loc.273>:
	init_max5825();
     40a:	65 d1       	rcall	.+714    	; 0x6d6 <init_max5825>

0000040c <.LBB29>:
     40c:	2f ef       	ldi	r18, 0xFF	; 255
     40e:	81 ee       	ldi	r24, 0xE1	; 225
     410:	94 e0       	ldi	r25, 0x04	; 4

00000412 <.L1^B3>:
     412:	21 50       	subi	r18, 0x01	; 1
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	90 40       	sbci	r25, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <.L1^B3>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <L0^A>

0000041c <L0^A>:
	...

0000041e <.LBE32>:
	if ((PINB >> PB1) & 1)
     41e:	b1 9b       	sbis	0x16, 1	; 22
     420:	0f c0       	rjmp	.+30     	; 0x440 <.L58>

00000422 <.Loc.287>:
		set_pin_ptr = &set_pin_inv;
     422:	8e e7       	ldi	r24, 0x7E	; 126
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <set_pin_ptr+0x1>
     42a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <set_pin_ptr>

0000042e <.Loc.289>:
		clear_pin_ptr = &clear_pin_inv;
     42e:	85 e9       	ldi	r24, 0x95	; 149
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <clear_pin_ptr+0x1>
     436:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <clear_pin_ptr>
     43a:	08 95       	ret

0000043c <.L64>:
		DDRC &= ~((1 << BUTTON_PIN)); // INPUT
     43c:	a1 98       	cbi	0x14, 1	; 20
     43e:	cf cf       	rjmp	.-98     	; 0x3de <.L54>

00000440 <.L58>:
		set_pin_ptr = &clear_pin_inv;
     440:	85 e9       	ldi	r24, 0x95	; 149
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <set_pin_ptr+0x1>
     448:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <set_pin_ptr>

0000044c <.Loc.295>:
		clear_pin_ptr = &set_pin_inv;
     44c:	8e e7       	ldi	r24, 0x7E	; 126
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <clear_pin_ptr+0x1>
     454:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <clear_pin_ptr>

00000458 <.Loc.297>:
}
     458:	08 95       	ret

0000045a <start_timer1>:
	TCNT1 = 0;
     45a:	1d bc       	out	0x2d, r1	; 45
     45c:	1c bc       	out	0x2c, r1	; 44

0000045e <.Loc.301>:
	TCCR1A = 0;
     45e:	1f bc       	out	0x2f, r1	; 47

00000460 <.Loc.303>:
	TCCR1B = (0b101 << CS00); /// 1024
     460:	95 e0       	ldi	r25, 0x05	; 5
     462:	9e bd       	out	0x2e, r25	; 46

00000464 <.Loc.305>:
	OCR1A = cmp_value;		  // 157;//ca. 10ms@16MHz
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	9b bd       	out	0x2b, r25	; 43
     468:	8a bd       	out	0x2a, r24	; 42

0000046a <.Loc.307>:
	TIFR |= (1 << OCF1A);
     46a:	88 b7       	in	r24, 0x38	; 56

0000046c <.LVL59>:
     46c:	80 61       	ori	r24, 0x10	; 16
     46e:	88 bf       	out	0x38, r24	; 56

00000470 <.Loc.310>:
	TIMSK |= (1 << OCIE1A);
     470:	89 b7       	in	r24, 0x39	; 57
     472:	80 61       	ori	r24, 0x10	; 16
     474:	89 bf       	out	0x39, r24	; 57

00000476 <.Loc.312>:
}
     476:	08 95       	ret

00000478 <clock>:
	if(!midi_clock_run) return;
     478:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <midi_clock_run>

0000047c <.LVL61>:
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <.LVL62>

00000480 <L0^A>:
     480:	46 c0       	rjmp	.+140    	; 0x50e <.L67>

00000482 <.LVL62>:
	if (midi_clock_tick_cntr % 6 == 0)
     482:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <midi_clock_tick_cntr>
     486:	8b ea       	ldi	r24, 0xAB	; 171
     488:	28 9f       	mul	r18, r24
     48a:	81 2d       	mov	r24, r1
     48c:	11 24       	eor	r1, r1
     48e:	86 95       	lsr	r24
     490:	86 95       	lsr	r24
     492:	98 2f       	mov	r25, r24
     494:	99 0f       	add	r25, r25
     496:	89 0f       	add	r24, r25
     498:	88 0f       	add	r24, r24

0000049a <.Loc.321>:
     49a:	28 13       	cpse	r18, r24
     49c:	2b c0       	rjmp	.+86     	; 0x4f4 <.L73>

0000049e <.Loc.322>:
		(*set_pin_ptr)(PIN_A);
     49e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <set_pin_ptr>
     4a2:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <set_pin_ptr+0x1>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	09 95       	icall

000004aa <.LVL63>:
		pulse_reset_flag[PIN_A] = true;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <pulse_reset_flag>

000004b0 <.LVL64>:
		timer_flag = true;
     4b0:	21 e0       	ldi	r18, 0x01	; 1

000004b2 <.L68>:
	if(midi_clock_cntr % 24 == 0)
     4b2:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <midi_clock_cntr>
     4b6:	8b ea       	ldi	r24, 0xAB	; 171
     4b8:	98 9f       	mul	r25, r24
     4ba:	81 2d       	mov	r24, r1
     4bc:	11 24       	eor	r1, r1
     4be:	82 95       	swap	r24
     4c0:	8f 70       	andi	r24, 0x0F	; 15
     4c2:	38 e1       	ldi	r19, 0x18	; 24
     4c4:	83 9f       	mul	r24, r19
     4c6:	90 19       	sub	r25, r0
     4c8:	11 24       	eor	r1, r1

000004ca <.Loc.330>:
     4ca:	91 11       	cpse	r25, r1
     4cc:	15 c0       	rjmp	.+42     	; 0x4f8 <.L69>

000004ce <.Loc.331>:
		(*set_pin_ptr)(PIN_B);
     4ce:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <set_pin_ptr>
     4d2:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <set_pin_ptr+0x1>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	09 95       	icall

000004da <.LVL66>:
		pulse_reset_flag[PIN_B] = true;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <pulse_reset_flag+0x1>

000004e0 <.LVL67>:
	midi_clock_tick_cntr++;
     4e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <midi_clock_tick_cntr>
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <midi_clock_tick_cntr>

000004ea <.Loc.338>:
	if (midi_clock_tick_cntr > 23) midi_clock_tick_cntr = 0;
     4ea:	88 31       	cpi	r24, 0x18	; 24
     4ec:	88 f4       	brcc	.+34     	; 0x510 <.L74>

000004ee <.L71>:
	if(timer_flag) start_timer1(36); // enable clock timer (ca. 2-3 ms) to trigger pin reset
     4ee:	84 e2       	ldi	r24, 0x24	; 36
     4f0:	b4 df       	rcall	.-152    	; 0x45a <start_timer1>

000004f2 <.LVL69>:
     4f2:	0d c0       	rjmp	.+26     	; 0x50e <.L67>

000004f4 <.L73>:
	bool timer_flag = false;
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	dd cf       	rjmp	.-70     	; 0x4b2 <.L68>

000004f8 <.L69>:
	midi_clock_tick_cntr++;
     4f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <midi_clock_tick_cntr>
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <midi_clock_tick_cntr>

00000502 <.Loc.344>:
	if (midi_clock_tick_cntr > 23) midi_clock_tick_cntr = 0;
     502:	88 31       	cpi	r24, 0x18	; 24
     504:	10 f0       	brcs	.+4      	; 0x50a <.L72>

00000506 <.L70>:
     506:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <midi_clock_tick_cntr>

0000050a <.L72>:
	if(timer_flag) start_timer1(36); // enable clock timer (ca. 2-3 ms) to trigger pin reset
     50a:	21 11       	cpse	r18, r1
     50c:	f0 cf       	rjmp	.-32     	; 0x4ee <.L71>

0000050e <.L67>:
}
     50e:	08 95       	ret

00000510 <.L74>:
		timer_flag = true;
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	f9 cf       	rjmp	.-14     	; 0x506 <.L70>

00000514 <run>:
	if(!midi_clock_run)
     514:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <midi_clock_run>

00000518 <.LVL75>:
     518:	81 11       	cpse	r24, r1

0000051a <.L76>:
}
     51a:	08 95       	ret

0000051c <.LVL77>:
		max5825_set_load_channel(0, 0xFFFF);	
     51c:	6f ef       	ldi	r22, 0xFF	; 255
     51e:	7f ef       	ldi	r23, 0xFF	; 255

00000520 <.LVL78>:
     520:	f4 d0       	rcall	.+488    	; 0x70a <max5825_set_load_channel>

00000522 <.LVL79>:
		midi_clock_tick_cntr = 0;
     522:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <midi_clock_tick_cntr>

00000526 <.Loc.362>:
		midi_clock_run = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <midi_clock_run>

0000052c <.Loc.364>:
		start_timer1(36);
     52c:	84 e2       	ldi	r24, 0x24	; 36
     52e:	95 df       	rcall	.-214    	; 0x45a <start_timer1>

00000530 <.LVL80>:
     530:	f4 cf       	rjmp	.-24     	; 0x51a <.L76>

00000532 <stop>:
	if(midi_clock_run)
     532:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <midi_clock_run>

00000536 <.LVL82>:
     536:	81 11       	cpse	r24, r1
     538:	01 c0       	rjmp	.+2      	; 0x53c <.L80>

0000053a <.L79>:
}
     53a:	08 95       	ret

0000053c <.L80>:
		max5825_set_load_channel(0, 0x0);
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	60 e0       	ldi	r22, 0x00	; 0

00000540 <.LVL85>:
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	e3 d0       	rcall	.+454    	; 0x70a <max5825_set_load_channel>

00000544 <.LVL86>:
		midi_clock_run = 0;
     544:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <midi_clock_run>

00000548 <.Loc.375>:
		max5825_set_load_channel(1, 0xFFFF);
     548:	6f ef       	ldi	r22, 0xFF	; 255
     54a:	7f ef       	ldi	r23, 0xFF	; 255
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	dd d0       	rcall	.+442    	; 0x70a <max5825_set_load_channel>

00000550 <.LVL87>:
		clk_stop_pulse = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <clk_stop_pulse>

00000556 <.Loc.378>:
		start_timer1(36);
     556:	84 e2       	ldi	r24, 0x24	; 36
     558:	80 df       	rcall	.-256    	; 0x45a <start_timer1>

0000055a <.LVL88>:
     55a:	ef cf       	rjmp	.-34     	; 0x53a <.L79>

0000055c <register_midi_channel>:
	midi_register_event_handler(EVT_CHAN_NOTE_OFF, note_off);
}

/* chan = midi channel 0 - 15, note_mode 1,2,3,4 a.k.a. note polyphony */
void register_midi_channel(uint8_t chan, uint8_t note_mode, int8_t note_min, int8_t note_max, int8_t note_offset)
{
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	c6 2f       	mov	r28, r22
     56c:	14 2f       	mov	r17, r20
     56e:	d2 2e       	mov	r13, r18

00000570 <.Loc.381>:
	if (note_mode < 1) return;
     570:	66 23       	and	r22, r22
     572:	b1 f0       	breq	.+44     	; 0x5a0 <.L81>

00000574 <.Loc.383>:
	if (hw_slots + note_mode > maxSlots) return;
     574:	d0 91 6b 00 	lds	r29, 0x006B	; 0x80006b <hw_slots>
     578:	4d 2f       	mov	r20, r29

0000057a <.LVL90>:
     57a:	46 0f       	add	r20, r22
     57c:	55 27       	eor	r21, r21
     57e:	55 1f       	adc	r21, r21

00000580 <.Loc.386>:
     580:	49 30       	cpi	r20, 0x09	; 9
     582:	51 05       	cpc	r21, r1
     584:	6c f4       	brge	.+26     	; 0x5a0 <.L81>

00000586 <.Loc.387>:
	if(chan > 15) return;
     586:	80 31       	cpi	r24, 0x10	; 16
     588:	58 f4       	brcc	.+22     	; 0x5a0 <.L81>

0000058a <.Loc.389>:
	if(chan < 0) return;
	if(active_chan[chan] != NULL) return;
     58a:	e8 2e       	mov	r14, r24
     58c:	f1 2c       	mov	r15, r1
     58e:	f7 01       	movw	r30, r14
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	ec 50       	subi	r30, 0x0C	; 12
     596:	ff 4f       	sbci	r31, 0xFF	; 255

00000598 <.Loc.392>:
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01

0000059c <.LVL91>:
     59c:	89 2b       	or	r24, r25
     59e:	41 f0       	breq	.+16     	; 0x5b0 <.L83>

000005a0 <.L81>:

	active_chan[chan]->max_num_notes = note_mode; 
	active_chan[chan]->midi_note_offset = note_offset;
	active_chan[chan]->midi_note_min = note_min;
	active_chan[chan]->midi_note_max = note_max;	
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28

000005a4 <.LVL93>:
     5a4:	1f 91       	pop	r17

000005a6 <.LVL94>:
     5a6:	0f 91       	pop	r16

000005a8 <.LVL95>:
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13

000005ae <.LVL96>:
     5ae:	08 95       	ret

000005b0 <.L83>:
	active_chan[chan] = (channel_data*)calloc(1,sizeof(channel_data));
     5b0:	60 e1       	ldi	r22, 0x10	; 16
     5b2:	70 e0       	ldi	r23, 0x00	; 0

000005b4 <.LVL98>:
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	b1 d3       	rcall	.+1890   	; 0xd1c <calloc>

000005ba <.LVL99>:
     5ba:	a8 2f       	mov	r26, r24
     5bc:	b9 2f       	mov	r27, r25

000005be <.Loc.402>:
     5be:	f7 01       	movw	r30, r14
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	ec 50       	subi	r30, 0x0C	; 12
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	b1 83       	std	Z+1, r27	; 0x01
     5ca:	a0 83       	st	Z, r26

000005cc <.Loc.403>:
	if (active_chan[chan] == NULL)
     5cc:	10 97       	sbiw	r26, 0x00	; 0
     5ce:	41 f3       	breq	.-48     	; 0x5a0 <.L81>

000005d0 <.Loc.405>:
	active_chan[chan]->dac_offset = hw_slots;
     5d0:	11 96       	adiw	r26, 0x01	; 1
     5d2:	dc 93       	st	X, r29
     5d4:	11 97       	sbiw	r26, 0x01	; 1

000005d6 <.Loc.407>:
	hw_slots += note_mode;
     5d6:	dc 0f       	add	r29, r28
     5d8:	d0 93 6b 00 	sts	0x006B, r29	; 0x80006b <hw_slots>

000005dc <.Loc.409>:
	active_chan[chan]->max_num_notes = note_mode; 
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	cc 93       	st	X, r28
     5e0:	12 97       	sbiw	r26, 0x02	; 2

000005e2 <.Loc.411>:
	active_chan[chan]->midi_note_offset = note_offset;
     5e2:	1f 96       	adiw	r26, 0x0f	; 15
     5e4:	0c 93       	st	X, r16
     5e6:	1f 97       	sbiw	r26, 0x0f	; 15

000005e8 <.Loc.413>:
	active_chan[chan]->midi_note_min = note_min;
     5e8:	1d 96       	adiw	r26, 0x0d	; 13
     5ea:	1c 93       	st	X, r17
     5ec:	1d 97       	sbiw	r26, 0x0d	; 13

000005ee <.Loc.415>:
	active_chan[chan]->midi_note_max = note_max;	
     5ee:	1e 96       	adiw	r26, 0x0e	; 14
     5f0:	dc 92       	st	X, r13
     5f2:	d6 cf       	rjmp	.-84     	; 0x5a0 <.L81>

000005f4 <register_funcs>:
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17

000005f8 <.Loc.418>:
	register_midi_channel(0x0,2,0,60,0);
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	2c e3       	ldi	r18, 0x3C	; 60
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	a7 df       	rcall	.-178    	; 0x55c <register_midi_channel>

0000060e <.LVL100>:
	register_midi_channel(0x1,2,0,60,0);
     60e:	2c e3       	ldi	r18, 0x3C	; 60
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	9e df       	rcall	.-196    	; 0x55c <register_midi_channel>

00000620 <.LVL101>:
	register_midi_channel(0x2,2,0,60,0);
     620:	2c e3       	ldi	r18, 0x3C	; 60
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	62 e0       	ldi	r22, 0x02	; 2
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	95 df       	rcall	.-214    	; 0x55c <register_midi_channel>

00000632 <.LVL102>:
	midi_register_event_handler(EVT_SYS_REALTIME_TIMING_CLOCK, clock);
     632:	6c e3       	ldi	r22, 0x3C	; 60
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	8c d0       	rcall	.+280    	; 0x752 <midi_register_event_handler>

0000063a <.LVL103>:
	midi_register_event_handler(EVT_SYS_REALTIME_SEQ_START, run);
     63a:	6a e8       	ldi	r22, 0x8A	; 138
     63c:	72 e0       	ldi	r23, 0x02	; 2
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	88 d0       	rcall	.+272    	; 0x752 <midi_register_event_handler>

00000642 <.LVL104>:
	midi_register_event_handler(EVT_SYS_REALTIME_SEQ_STOP, stop);
     642:	69 e9       	ldi	r22, 0x99	; 153
     644:	72 e0       	ldi	r23, 0x02	; 2
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	84 d0       	rcall	.+264    	; 0x752 <midi_register_event_handler>

0000064a <.LVL105>:
	midi_register_event_handler(EVT_SYS_REALTIME_SEQ_CONTINUE, cont);
     64a:	6f ec       	ldi	r22, 0xCF	; 207
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	80 d0       	rcall	.+256    	; 0x752 <midi_register_event_handler>

00000652 <.LVL106>:
	midi_register_event_handler(EVT_CHAN_NOTE_ON, note_on);
     652:	6a ed       	ldi	r22, 0xDA	; 218
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	89 e0       	ldi	r24, 0x09	; 9
     658:	7c d0       	rcall	.+248    	; 0x752 <midi_register_event_handler>

0000065a <.LVL107>:
	midi_register_event_handler(EVT_CHAN_NOTE_OFF, note_off);
     65a:	6c ea       	ldi	r22, 0xAC	; 172
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	78 d0       	rcall	.+240    	; 0x752 <midi_register_event_handler>

00000662 <.LVL108>:
}
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <main>:
	tram8_cfg();
     668:	9c de       	rcall	.-712    	; 0x3a2 <tram8_cfg>

0000066a <.LVL109>:
	tram8_init();
     66a:	ea dd       	rcall	.-1068   	; 0x240 <tram8_init>

0000066c <.LVL110>:
	midi_init();
     66c:	65 d0       	rcall	.+202    	; 0x738 <midi_init>

0000066e <.LVL111>:
	register_funcs();
     66e:	c2 df       	rcall	.-124    	; 0x5f4 <register_funcs>

00000670 <.LVL112>:
	sei();
     670:	78 94       	sei

00000672 <.LBB33>:
			learn_button = BUTTON_DOWN;
     672:	c2 e0       	ldi	r28, 0x02	; 2

00000674 <.Loc.435>:
						learn_button = BUTTON_PRESSED;
     674:	13 e0       	ldi	r17, 0x03	; 3

00000676 <.Loc.436>:
						learn_button = BUTTON_RELEASED;
     676:	d4 e0       	ldi	r29, 0x04	; 4
     678:	08 c0       	rjmp	.+16     	; 0x68a <.L91>

0000067a <.L98>:
			set_LED(DISABLE);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	8c de       	rcall	.-744    	; 0x396 <set_LED>

0000067e <.LVL113>:
		if (learn_button == BUTTON_DOWN)
     67e:	02 c0       	rjmp	.+4      	; 0x684 <.L88>

00000680 <.L89>:
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	59 f0       	breq	.+22     	; 0x69a <.L90>

00000684 <.L88>:
		if ((TIFR >> OCF2) & 1) // Timer Interrupt Flag Register
     684:	08 b6       	in	r0, 0x38	; 56
     686:	07 fc       	sbrc	r0, 7
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <.L97>

0000068a <.L91>:
		if ((learn_button == BUTTON_RELEASED))
     68a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <learn_button.2374>

0000068e <.Loc.452>:
     68e:	84 30       	cpi	r24, 0x04	; 4
     690:	a1 f3       	breq	.-24     	; 0x67a <.L98>

00000692 <.Loc.453>:
		if (learn_button == BUTTON_PRESSED)
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	a9 f7       	brne	.-22     	; 0x680 <.L89>

00000696 <.Loc.455>:
			learn_button = BUTTON_DOWN;
     696:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <learn_button.2374>

0000069a <.L90>:
			set_LED(ENABLE);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	7c de       	rcall	.-776    	; 0x396 <set_LED>

0000069e <.LVL114>:
     69e:	f2 cf       	rjmp	.-28     	; 0x684 <.L88>

000006a0 <.L97>:
			TCNT2 = 0;			 // reset timer
     6a0:	14 bc       	out	0x24, r1	; 36

000006a2 <.Loc.461>:
			TIFR |= (1 << OCF2); // reset flag
     6a2:	88 b7       	in	r24, 0x38	; 56
     6a4:	80 68       	ori	r24, 0x80	; 128
     6a6:	88 bf       	out	0x38, r24	; 56

000006a8 <.Loc.463>:
			button_now = PINC & (1 << BUTTON_PIN);
     6a8:	83 b3       	in	r24, 0x13	; 19
     6aa:	82 70       	andi	r24, 0x02	; 2

000006ac <.Loc.465>:
			if (button_now != button_bounce)
     6ac:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <button_bounce.2376>
     6b0:	89 17       	cp	r24, r25
     6b2:	19 f0       	breq	.+6      	; 0x6ba <.L92>

000006b4 <.Loc.467>:
				button_bounce = button_now;
     6b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <button_bounce.2376>
     6b8:	e8 cf       	rjmp	.-48     	; 0x68a <.L91>

000006ba <.L92>:
				if (button_now != button_last)
     6ba:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <button_last.2377>
     6be:	89 17       	cp	r24, r25
     6c0:	21 f3       	breq	.-56     	; 0x68a <.L91>

000006c2 <.Loc.471>:
					if (button_now == 0)
     6c2:	81 11       	cpse	r24, r1
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <.L94>

000006c6 <.Loc.473>:
						learn_button = BUTTON_RELEASED;
     6c6:	d0 93 66 00 	sts	0x0066, r29	; 0x800066 <learn_button.2374>

000006ca <.L95>:
					button_last = button_now;
     6ca:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <button_last.2377>
     6ce:	dd cf       	rjmp	.-70     	; 0x68a <.L91>

000006d0 <.L94>:
						learn_button = BUTTON_PRESSED;
     6d0:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <learn_button.2374>
     6d4:	fa cf       	rjmp	.-12     	; 0x6ca <.L95>

000006d6 <init_max5825>:

#include <avr/io.h>
#include "MAX5825.h"
#include "general_twi.h"

void init_max5825(void){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	00 d0       	rcall	.+0      	; 0x6dc <L0^A>

000006dc <L0^A>:
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62

000006e0 <.Loc.1>:
		
	

	uint8_t data[2] = {NULL};
     6e0:	1a 82       	std	Y+2, r1	; 0x02
     6e2:	19 82       	std	Y+1, r1	; 0x01

000006e4 <.Loc.3>:
	TWI_WRITE_BULK(MAX5825_ADDR,(MAX5825_REG_REF | 0b101),2,&data); //INT REF 0b111=4.096V //0b101=2.5V ALL DAC PWR ON 	
     6e4:	9e 01       	movw	r18, r28
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	42 e0       	ldi	r20, 0x02	; 2
     6ec:	65 e2       	ldi	r22, 0x25	; 37
     6ee:	80 e2       	ldi	r24, 0x20	; 32
     6f0:	b6 dc       	rcall	.-1684   	; 0x5e <TWI_WRITE_BULK>

000006f2 <.LVL0>:
		
	TWI_WRITE_BULK(MAX5825_ADDR,MAX5825_REG_CODELOADALL,2,&data); // all to zero 
     6f2:	9e 01       	movw	r18, r28
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	42 e0       	ldi	r20, 0x02	; 2
     6fa:	62 ec       	ldi	r22, 0xC2	; 194
     6fc:	80 e2       	ldi	r24, 0x20	; 32
     6fe:	af dc       	rcall	.-1698   	; 0x5e <TWI_WRITE_BULK>

00000700 <.LVL1>:
		
	
	return;
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <max5825_set_load_channel>:
	
	return retval;
}


void max5825_set_load_channel(uint8_t ch, uint16_t value){
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <L0^A>

00000710 <L0^A>:
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62

00000714 <.LVL5>:
// this leads to a change in output value for every sixteen input value units --> 0 + 16*n before the right shift.

	uint8_t cmd_addr = (MAX5825_REG_CODEn_LOADn | (ch & 0x0F));
	uint8_t data[2]; 
	
	data[0]= (uint8_t) ((value>>8) & 0xFF);
     714:	79 83       	std	Y+1, r23	; 0x01

00000716 <.Loc.21>:
	data[1]= (uint8_t) (value & 0xF0);
     716:	60 7f       	andi	r22, 0xF0	; 240

00000718 <.LVL6>:
     718:	6a 83       	std	Y+2, r22	; 0x02

0000071a <.Loc.24>:
	uint8_t cmd_addr = (MAX5825_REG_CODEn_LOADn | (ch & 0x0F));
     71a:	68 2f       	mov	r22, r24
     71c:	6f 70       	andi	r22, 0x0F	; 15

0000071e <.Loc.26>:
     71e:	60 6b       	ori	r22, 0xB0	; 176

00000720 <.LVL7>:

	TWI_WRITE_BULK(MAX5825_ADDR,cmd_addr,2,&data);
     720:	9e 01       	movw	r18, r28
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	42 e0       	ldi	r20, 0x02	; 2
     728:	80 e2       	ldi	r24, 0x20	; 32

0000072a <.LVL8>:
     72a:	99 dc       	rcall	.-1742   	; 0x5e <TWI_WRITE_BULK>

0000072c <.LVL9>:
	
	return;
}
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <null_event_cb>:

// The null event callback is used by default for all events.
static void null_event_cb(char channel, char a, char b) {
  // Do nothing. The invoke_callback() function will properly implement the
  // global message counter.
}
     736:	08 95       	ret

00000738 <midi_init>:
 ****************************************************************************/


status_t midi_init() {
    // Initialize the callback table; all events to the null callback.
    for (int i = 0; i < EVT_MAX; ++i) {
     738:	e4 e1       	ldi	r30, 0x14	; 20
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	22 e3       	ldi	r18, 0x32	; 50
     73e:	31 e0       	ldi	r19, 0x01	; 1

00000740 <.Loc.6>:
        g_callbacks[i] = null_event_cb;
     740:	8b e9       	ldi	r24, 0x9B	; 155
     742:	93 e0       	ldi	r25, 0x03	; 3

00000744 <.L3>:
     744:	81 93       	st	Z+, r24
     746:	91 93       	st	Z+, r25

00000748 <.Loc.10>:
    for (int i = 0; i < EVT_MAX; ++i) {
     748:	e2 17       	cp	r30, r18
     74a:	f3 07       	cpc	r31, r19
     74c:	d9 f7       	brne	.-10     	; 0x744 <.L3>

0000074e <.LBE2>:
    }
    return 0;
}
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret

00000752 <midi_register_event_handler>:


status_t midi_register_event_handler(event_type evt, midi_event_callback_t cb) {
     752:	e8 2f       	mov	r30, r24
     754:	86 2f       	mov	r24, r22

00000756 <.LVL4>:
     756:	97 2f       	mov	r25, r23

00000758 <.Loc.17>:
    if (cb) {
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	49 f0       	breq	.+18     	; 0x76e <.L6>

0000075c <.Loc.19>:
        g_callbacks[evt] = cb;
     75c:	f0 e0       	ldi	r31, 0x00	; 0

0000075e <.Loc.21>:
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31

00000762 <.LVL5>:
     762:	ec 5e       	subi	r30, 0xEC	; 236
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24

0000076a <.L7>:
    } else {
        g_callbacks[evt] = null_event_cb;
    }
    
    return 0;    
}
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret

0000076e <.L6>:
        g_callbacks[evt] = null_event_cb;
     76e:	f0 e0       	ldi	r31, 0x00	; 0

00000770 <.Loc.27>:
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31

00000774 <.LVL7>:
     774:	ec 5e       	subi	r30, 0xEC	; 236
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	8b e9       	ldi	r24, 0x9B	; 155
     77a:	93 e0       	ldi	r25, 0x03	; 3
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24
     780:	f4 cf       	rjmp	.-24     	; 0x76a <.L7>

00000782 <midi_receive_byte>:
     * 
     * If it is determined that the byte is not any type of status byte, then
     * by process of elimination, it must be a data byte.
     */
    
    if ((byte & SYS_REALTIME_MASK) == SYS_REALTIME_MASK) {
     782:	98 2f       	mov	r25, r24
     784:	98 7f       	andi	r25, 0xF8	; 248
     786:	98 3f       	cpi	r25, 0xF8	; 248
     788:	91 f0       	breq	.+36     	; 0x7ae <.L46>

0000078a <.Loc.32>:
        // The byte is a system real-time status byte.
        g_debug_last_status_byte = byte;
        return rx_status_sys_realtime_byte(byte);
    } else if ((byte & SYS_COMMON_MASK) == SYS_COMMON_MASK) {
     78a:	98 2f       	mov	r25, r24
     78c:	90 7f       	andi	r25, 0xF0	; 240

0000078e <.Loc.33>:
     78e:	90 3f       	cpi	r25, 0xF0	; 240
     790:	09 f4       	brne	.+2      	; 0x794 <.Loc.34>

00000792 <L0^A>:
     792:	b6 c2       	rjmp	.+1388   	; 0xd00 <.L45>

00000794 <.Loc.34>:
        // The byte is a system common status byte.
        g_debug_last_status_byte = byte;
        return rx_status_sys_common_byte(byte);
    } else if (byte & CHAN_STATUS_MASK) {
     794:	88 23       	and	r24, r24
     796:	0c f4       	brge	.+2      	; 0x79a <.LBB41>

00000798 <L0^A>:
     798:	33 c1       	rjmp	.+614    	; 0xa00 <.L47>

0000079a <.LBB41>:
    switch (g_state) {
     79a:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <g_state>
     79e:	e2 50       	subi	r30, 0x02	; 2
     7a0:	ec 30       	cpi	r30, 0x0C	; 12
     7a2:	08 f0       	brcs	.+2      	; 0x7a6 <L0^A+0x2>

000007a4 <L0^A>:
     7a4:	a5 c2       	rjmp	.+1354   	; 0xcf0 <.L30>
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ef 50       	subi	r30, 0x0F	; 15
     7aa:	f8 4f       	sbci	r31, 0xF8	; 248
     7ac:	09 94       	ijmp

000007ae <.L46>:
    switch (byte) {
     7ae:	88 5f       	subi	r24, 0xF8	; 248

000007b0 <.LVL11>:
     7b0:	88 30       	cpi	r24, 0x08	; 8
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <L0^A+0x2>

000007b4 <L0^A>:
     7b4:	a3 c2       	rjmp	.+1350   	; 0xcfc <.L44>
     7b6:	e8 2f       	mov	r30, r24
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	e3 50       	subi	r30, 0x03	; 3
     7bc:	f8 4f       	sbci	r31, 0xF8	; 248
     7be:	09 94       	ijmp

000007c0 <.L19>:
    ++g_message_counter;
     7c0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     7c4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     7c8:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     7cc:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>

000007d0 <.LVL13>:
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	a1 1d       	adc	r26, r1
     7d4:	b1 1d       	adc	r27, r1
     7d6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     7da:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     7de:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     7e2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

000007e6 <.Loc.51>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     7e6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <g_callbacks>
     7ea:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <g_callbacks+0x1>
     7ee:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     7f2:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     7f6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     7fa:	09 95       	icall

000007fc <.Loc.53>:
    g_data_byte_one = 0;
     7fc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000800 <.Loc.55>:
    g_data_byte_two = 0;
     800:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000804 <.LBE59>:
        return rx_status_sys_realtime_byte(byte);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 95       	ret

00000808 <.L18>:
    ++g_message_counter;
     808:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     80c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     810:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     814:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	a1 1d       	adc	r26, r1
     81c:	b1 1d       	adc	r27, r1
     81e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     822:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     826:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     82a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

0000082e <.Loc.62>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     82e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <g_callbacks+0x2>
     832:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <g_callbacks+0x3>
     836:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     83a:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     83e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     842:	09 95       	icall

00000844 <.Loc.64>:
    g_data_byte_one = 0;
     844:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000848 <.Loc.66>:
    g_data_byte_two = 0;
     848:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

0000084c <.LBE61>:
        return rx_status_sys_realtime_byte(byte);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	08 95       	ret

00000850 <.L17>:
    ++g_message_counter;
     850:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     854:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     858:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     85c:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	a1 1d       	adc	r26, r1
     864:	b1 1d       	adc	r27, r1
     866:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     86a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     86e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     872:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

00000876 <.Loc.73>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     876:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <g_callbacks+0x4>
     87a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <g_callbacks+0x5>
     87e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     882:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     886:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     88a:	09 95       	icall

0000088c <.Loc.75>:
    g_data_byte_one = 0;
     88c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000890 <.Loc.77>:
    g_data_byte_two = 0;
     890:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000894 <.LBE63>:
        return rx_status_sys_realtime_byte(byte);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	08 95       	ret

00000898 <.L16>:
    ++g_message_counter;
     898:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     89c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     8a0:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     8a4:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	a1 1d       	adc	r26, r1
     8ac:	b1 1d       	adc	r27, r1
     8ae:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     8b2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     8b6:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     8ba:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

000008be <.Loc.84>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     8be:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <g_callbacks+0x6>
     8c2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <g_callbacks+0x7>
     8c6:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     8ca:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     8ce:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     8d2:	09 95       	icall

000008d4 <.Loc.86>:
    g_data_byte_one = 0;
     8d4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

000008d8 <.Loc.88>:
    g_data_byte_two = 0;
     8d8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

000008dc <.LBE65>:
        return rx_status_sys_realtime_byte(byte);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <.L15>:
    ++g_message_counter;
     8e0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     8e4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     8e8:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     8ec:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	a1 1d       	adc	r26, r1
     8f4:	b1 1d       	adc	r27, r1
     8f6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     8fa:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     8fe:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     902:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

00000906 <.Loc.95>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     906:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <g_callbacks+0x8>
     90a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <g_callbacks+0x9>
     90e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     912:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     916:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     91a:	09 95       	icall

0000091c <.Loc.97>:
    g_data_byte_one = 0;
     91c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000920 <.Loc.100>:
    g_data_byte_two = 0;
     920:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000924 <.LBE67>:
        return rx_status_sys_realtime_byte(byte);
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	08 95       	ret

00000928 <.L14>:
    ++g_message_counter;
     928:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     92c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     930:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     934:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
     93e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     942:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     946:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     94a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

0000094e <.Loc.106>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     94e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <g_callbacks+0xa>
     952:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <g_callbacks+0xb>
     956:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     95a:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     95e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     962:	09 95       	icall

00000964 <.Loc.108>:
    g_data_byte_one = 0;
     964:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000968 <.Loc.110>:
    g_data_byte_two = 0;
     968:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

0000096c <.LBE69>:
        return rx_status_sys_realtime_byte(byte);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret

00000970 <.L13>:
    ++g_message_counter;
     970:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     974:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     978:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     97c:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	a1 1d       	adc	r26, r1
     984:	b1 1d       	adc	r27, r1
     986:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     98a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     98e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     992:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

00000996 <.Loc.117>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     996:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <g_callbacks+0xc>
     99a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <g_callbacks+0xd>
     99e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     9a2:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     9a6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     9aa:	09 95       	icall

000009ac <.Loc.119>:
    g_data_byte_one = 0;
     9ac:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

000009b0 <.Loc.121>:
    g_data_byte_two = 0;
     9b0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

000009b4 <.LBE71>:
        return rx_status_sys_realtime_byte(byte);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret

000009b8 <.L11>:
    ++g_message_counter;
     9b8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_message_counter>
     9bc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <g_message_counter+0x1>
     9c0:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <g_message_counter+0x2>
     9c4:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <g_message_counter+0x3>
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	a1 1d       	adc	r26, r1
     9cc:	b1 1d       	adc	r27, r1
     9ce:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_message_counter>
     9d2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <g_message_counter+0x1>
     9d6:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <g_message_counter+0x2>
     9da:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <g_message_counter+0x3>

000009de <.Loc.128>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     9de:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <g_callbacks+0xe>
     9e2:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <g_callbacks+0xf>
     9e6:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <g_data_byte_two>
     9ea:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     9ee:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>
     9f2:	09 95       	icall

000009f4 <.Loc.130>:
    g_data_byte_one = 0;
     9f4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

000009f8 <.Loc.132>:
    g_data_byte_two = 0;
     9f8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

000009fc <.LBE73>:
        return rx_status_sys_realtime_byte(byte);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	08 95       	ret

00000a00 <.L47>:
    g_current_channel = (byte & CHAN_MASK);
     a00:	8f 70       	andi	r24, 0x0F	; 15

00000a02 <.LVL30>:
     a02:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <g_current_channel>

00000a06 <.Loc.142>:
    switch (type) {
     a06:	90 3b       	cpi	r25, 0xB0	; 176
     a08:	31 f1       	breq	.+76     	; 0xa56 <.L21>
     a0a:	80 f4       	brcc	.+32     	; 0xa2c <.L22>
     a0c:	90 39       	cpi	r25, 0x90	; 144
     a0e:	f1 f0       	breq	.+60     	; 0xa4c <.L23>
     a10:	90 3a       	cpi	r25, 0xA0	; 160
     a12:	29 f4       	brne	.+10     	; 0xa1e <.L48>

00000a14 <.Loc.143>:
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
     a14:	86 e0       	ldi	r24, 0x06	; 6
     a16:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a1a <.Loc.145>:
    return 0;
     a1a:	80 e0       	ldi	r24, 0x00	; 0

00000a1c <.Loc.147>:
            break;
     a1c:	08 95       	ret

00000a1e <.L48>:
    switch (type) {
     a1e:	90 38       	cpi	r25, 0x80	; 128
     a20:	21 f5       	brne	.+72     	; 0xa6a <.L26>

00000a22 <.Loc.149>:
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a28 <.Loc.151>:
    return 0;
     a28:	80 e0       	ldi	r24, 0x00	; 0

00000a2a <.Loc.153>:
            break;
     a2a:	08 95       	ret

00000a2c <.L22>:
    switch (type) {
     a2c:	90 3d       	cpi	r25, 0xD0	; 208
     a2e:	c1 f0       	breq	.+48     	; 0xa60 <.L27>
     a30:	90 3e       	cpi	r25, 0xE0	; 224
     a32:	29 f4       	brne	.+10     	; 0xa3e <.L49>

00000a34 <.Loc.155>:
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
     a34:	8c e0       	ldi	r24, 0x0C	; 12
     a36:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a3a <.Loc.157>:
    return 0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0

00000a3c <.Loc.159>:
            break;
     a3c:	08 95       	ret

00000a3e <.L49>:
    switch (type) {
     a3e:	90 3c       	cpi	r25, 0xC0	; 192
     a40:	a1 f4       	brne	.+40     	; 0xa6a <.L26>

00000a42 <.Loc.161>:
            g_state = STATE_WAITING_CHAN_PROGRAM_CHANGE_PROGRAM;
     a42:	8a e0       	ldi	r24, 0x0A	; 10
     a44:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a48 <.Loc.163>:
    return 0;
     a48:	80 e0       	ldi	r24, 0x00	; 0

00000a4a <.Loc.165>:
            break;
     a4a:	08 95       	ret

00000a4c <.L23>:
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a52 <.Loc.168>:
    return 0;
     a52:	80 e0       	ldi	r24, 0x00	; 0

00000a54 <.Loc.170>:
            break;
     a54:	08 95       	ret

00000a56 <.L21>:
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
     a56:	88 e0       	ldi	r24, 0x08	; 8
     a58:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a5c <.Loc.173>:
    return 0;
     a5c:	80 e0       	ldi	r24, 0x00	; 0

00000a5e <.Loc.175>:
            break;
     a5e:	08 95       	ret

00000a60 <.L27>:
            g_state = STATE_WAITING_CHAN_AFTERTOUCH_PRESSURE;
     a60:	8b e0       	ldi	r24, 0x0B	; 11
     a62:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a66 <.Loc.178>:
    return 0;
     a66:	80 e0       	ldi	r24, 0x00	; 0

00000a68 <.Loc.180>:
            break;
     a68:	08 95       	ret

00000a6a <.L26>:
            g_state = STATE_ERROR;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a70 <.Loc.183>:
            return E_MIDI_BAD_CHANNEL_STATE;
     a70:	8e ef       	ldi	r24, 0xFE	; 254
     a72:	08 95       	ret

00000a74 <.L43>:
            g_data_byte_one = byte;
     a74:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000a78 <.Loc.188>:
            g_state = STATE_WAITING_CHAN_NOTE_OFF_VELOCITY;
     a78:	83 e0       	ldi	r24, 0x03	; 3

00000a7a <.LVL32>:
     a7a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000a7e <.Loc.191>:
    return 0;
     a7e:	80 e0       	ldi	r24, 0x00	; 0

00000a80 <.Loc.193>:
            break;
     a80:	08 95       	ret

00000a82 <.L42>:
            g_data_byte_two = byte;
     a82:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_data_byte_two>

00000a86 <.LBB43>:
    ++g_message_counter;
     a86:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     a8a:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     a8e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     a92:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 4f       	sbci	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     aa2:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     aa6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     aaa:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000aae <.Loc.200>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     aae:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <g_callbacks+0x10>
     ab2:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <g_callbacks+0x11>
     ab6:	48 2f       	mov	r20, r24
     ab8:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     abc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000ac0 <.LVL35>:
     ac0:	09 95       	icall

00000ac2 <.LVL36>:
    g_data_byte_one = 0;
     ac2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000ac6 <.Loc.205>:
    g_data_byte_two = 0;
     ac6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000aca <.LBE43>:
            g_state = STATE_WAITING_CHAN_NOTE_OFF_KEY;
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000ad0 <.Loc.210>:
            return 1;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	08 95       	ret

00000ad4 <.L41>:
            g_data_byte_one = byte;
     ad4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000ad8 <.Loc.214>:
            g_state = STATE_WAITING_CHAN_NOTE_ON_VELOCITY;
     ad8:	85 e0       	ldi	r24, 0x05	; 5

00000ada <.LVL39>:
     ada:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000ade <.Loc.217>:
    return 0;
     ade:	80 e0       	ldi	r24, 0x00	; 0

00000ae0 <.Loc.219>:
            break;
     ae0:	08 95       	ret

00000ae2 <.L40>:
            g_data_byte_two = byte;
     ae2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_data_byte_two>

00000ae6 <.LBB45>:
    ++g_message_counter;
     ae6:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     aea:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     aee:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     af2:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     af6:	4f 5f       	subi	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	6f 4f       	sbci	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     b02:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     b06:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     b0a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000b0e <.Loc.226>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     b0e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <g_callbacks+0x12>
     b12:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <g_callbacks+0x13>
     b16:	48 2f       	mov	r20, r24
     b18:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     b1c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000b20 <.LVL42>:
     b20:	09 95       	icall

00000b22 <.LVL43>:
    g_data_byte_one = 0;
     b22:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000b26 <.Loc.231>:
    g_data_byte_two = 0;
     b26:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000b2a <.LBE45>:
            g_state = STATE_WAITING_CHAN_NOTE_ON_KEY;
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000b30 <.Loc.236>:
            return 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

00000b34 <.L39>:
            g_data_byte_one = byte;
     b34:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000b38 <.Loc.240>:
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_PRESSURE;
     b38:	87 e0       	ldi	r24, 0x07	; 7

00000b3a <.LVL46>:
     b3a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000b3e <.Loc.243>:
    return 0;
     b3e:	80 e0       	ldi	r24, 0x00	; 0

00000b40 <.Loc.245>:
            break;
     b40:	08 95       	ret

00000b42 <.L38>:
            g_data_byte_two = byte;
     b42:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_data_byte_two>

00000b46 <.LBB47>:
    ++g_message_counter;
     b46:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     b4a:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     b4e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     b52:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     b56:	4f 5f       	subi	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	6f 4f       	sbci	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     b62:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     b66:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     b6a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000b6e <.Loc.252>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     b6e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <g_callbacks+0x14>
     b72:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <g_callbacks+0x15>
     b76:	48 2f       	mov	r20, r24
     b78:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     b7c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000b80 <.LVL49>:
     b80:	09 95       	icall

00000b82 <.LVL50>:
    g_data_byte_one = 0;
     b82:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000b86 <.Loc.257>:
    g_data_byte_two = 0;
     b86:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000b8a <.LBE47>:
            g_state = STATE_WAITING_CHAN_POLY_AFTERTOUCH_KEY;
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000b90 <.Loc.262>:
            return 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	08 95       	ret

00000b94 <.L37>:
            g_data_byte_one = byte;
     b94:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000b98 <.Loc.266>:
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_VALUE;
     b98:	89 e0       	ldi	r24, 0x09	; 9

00000b9a <.LVL53>:
     b9a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000b9e <.Loc.269>:
    return 0;
     b9e:	80 e0       	ldi	r24, 0x00	; 0

00000ba0 <.Loc.271>:
            break;
     ba0:	08 95       	ret

00000ba2 <.L36>:
            g_data_byte_two = byte;
     ba2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_data_byte_two>

00000ba6 <.LBB49>:
    ++g_message_counter;
     ba6:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     baa:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     bae:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     bb2:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     bb6:	4f 5f       	subi	r20, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	6f 4f       	sbci	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     bc2:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     bc6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     bca:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000bce <.Loc.278>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     bce:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <g_callbacks+0x16>
     bd2:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <g_callbacks+0x17>
     bd6:	48 2f       	mov	r20, r24
     bd8:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     bdc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000be0 <.LVL56>:
     be0:	09 95       	icall

00000be2 <.LVL57>:
    g_data_byte_one = 0;
     be2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000be6 <.Loc.283>:
    g_data_byte_two = 0;
     be6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000bea <.LBE49>:
            g_state = STATE_WAITING_CHAN_CONTROL_CHANGE_CONTROL;
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000bf0 <.Loc.288>:
            return 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret

00000bf4 <.L35>:
            g_data_byte_one = byte;
     bf4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000bf8 <.Loc.292>:
            g_data_byte_two = 0;
     bf8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000bfc <.LBB51>:
    ++g_message_counter;
     bfc:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     c00:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     c04:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     c08:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     c0c:	4f 5f       	subi	r20, 0xFF	; 255
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	6f 4f       	sbci	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     c18:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     c1c:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     c20:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000c24 <.Loc.298>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     c24:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <g_callbacks+0x18>
     c28:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <g_callbacks+0x19>
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	68 2f       	mov	r22, r24
     c30:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000c34 <.LVL61>:
     c34:	09 95       	icall

00000c36 <.LVL62>:
    g_data_byte_one = 0;
     c36:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000c3a <.Loc.303>:
    g_data_byte_two = 0;
     c3a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000c3e <.LBE51>:
            return 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	08 95       	ret

00000c42 <.L34>:
            g_data_byte_one = byte;
     c42:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000c46 <.Loc.308>:
            g_data_byte_two = 0;
     c46:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000c4a <.LBB53>:
    ++g_message_counter;
     c4a:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     c4e:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     c52:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     c56:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     c5a:	4f 5f       	subi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	6f 4f       	sbci	r22, 0xFF	; 255
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     c66:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     c6a:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     c6e:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000c72 <.Loc.314>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     c72:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <g_callbacks+0x1a>
     c76:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <g_callbacks+0x1b>
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	68 2f       	mov	r22, r24
     c7e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000c82 <.LVL65>:
     c82:	09 95       	icall

00000c84 <.LVL66>:
    g_data_byte_one = 0;
     c84:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000c88 <.Loc.319>:
    g_data_byte_two = 0;
     c88:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000c8c <.LBE53>:
            return 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	08 95       	ret

00000c90 <.L33>:
            g_data_byte_one = byte;
     c90:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <g_data_byte_one>

00000c94 <.Loc.324>:
            g_state = STATE_WAITING_CHAN_PITCH_BEND_MSBITS;
     c94:	8d e0       	ldi	r24, 0x0D	; 13

00000c96 <.LVL68>:
     c96:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000c9a <.Loc.327>:
    return 0;
     c9a:	80 e0       	ldi	r24, 0x00	; 0

00000c9c <.Loc.329>:
            break;
     c9c:	08 95       	ret

00000c9e <.L31>:
            g_data_byte_two = byte;
     c9e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_data_byte_two>

00000ca2 <.LBB55>:
    ++g_message_counter;
     ca2:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_message_counter>
     ca6:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_message_counter+0x1>
     caa:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_message_counter+0x2>
     cae:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_message_counter+0x3>
     cb2:	4f 5f       	subi	r20, 0xFF	; 255
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	6f 4f       	sbci	r22, 0xFF	; 255
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <g_message_counter>
     cbe:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <g_message_counter+0x1>
     cc2:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_message_counter+0x2>
     cc6:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_message_counter+0x3>

00000cca <.Loc.336>:
    (g_callbacks[evt])(g_current_channel, g_data_byte_one, g_data_byte_two);
     cca:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <g_callbacks+0x1c>
     cce:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <g_callbacks+0x1d>
     cd2:	48 2f       	mov	r20, r24
     cd4:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_data_byte_one>
     cd8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_current_channel>

00000cdc <.LVL71>:
     cdc:	09 95       	icall

00000cde <.LVL72>:
    g_data_byte_one = 0;
     cde:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000ce2 <.Loc.341>:
    g_data_byte_two = 0;
     ce2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000ce6 <.LBE55>:
            g_state = STATE_WAITING_CHAN_PITCH_BEND_LSBITS;
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_state>

00000cec <.Loc.346>:
            return 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	08 95       	ret

00000cf0 <.L30>:
            g_data_byte_one = 0;
     cf0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_data_byte_one>

00000cf4 <.Loc.350>:
            g_data_byte_two = 0;
     cf4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_data_byte_two>

00000cf8 <.Loc.352>:
    return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0

00000cfa <.LVL75>:
            break;
     cfa:	08 95       	ret

00000cfc <.L44>:
    if ((byte & SYS_REALTIME_MASK) == SYS_REALTIME_MASK) {
     cfc:	81 e0       	ldi	r24, 0x01	; 1

00000cfe <.LVL77>:
     cfe:	08 95       	ret

00000d00 <.L45>:
        return rx_status_sys_common_byte(byte);
     d00:	80 e0       	ldi	r24, 0x00	; 0

00000d02 <.LVL79>:
    } else {
        // The byte is a regular data byte.
        g_debug_last_data_byte = byte;
        return rx_data_byte(byte);
    }
}
     d02:	08 95       	ret

00000d04 <__udivmodqi4>:
     d04:	99 1b       	sub	r25, r25

00000d06 <.Loc.1>:
     d06:	79 e0       	ldi	r23, 0x09	; 9

00000d08 <.Loc.2>:
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__udivmodqi4_ep>

00000d0a <__udivmodqi4_loop>:
     d0a:	99 1f       	adc	r25, r25

00000d0c <.Loc.4>:
     d0c:	96 17       	cp	r25, r22

00000d0e <.Loc.5>:
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <__udivmodqi4_ep>

00000d10 <.Loc.6>:
     d10:	96 1b       	sub	r25, r22

00000d12 <__udivmodqi4_ep>:
     d12:	88 1f       	adc	r24, r24

00000d14 <.Loc.8>:
     d14:	7a 95       	dec	r23

00000d16 <.Loc.9>:
     d16:	c9 f7       	brne	.-14     	; 0xd0a <__udivmodqi4_loop>

00000d18 <.Loc.10>:
     d18:	80 95       	com	r24

00000d1a <.Loc.11>:
     d1a:	08 95       	ret

00000d1c <calloc>:
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	86 9f       	mul	r24, r22
     d26:	80 01       	movw	r16, r0
     d28:	87 9f       	mul	r24, r23
     d2a:	10 0d       	add	r17, r0
     d2c:	96 9f       	mul	r25, r22
     d2e:	10 0d       	add	r17, r0
     d30:	11 24       	eor	r1, r1
     d32:	c8 01       	movw	r24, r16
     d34:	0d d0       	rcall	.+26     	; 0xd50 <malloc>
     d36:	ec 01       	movw	r28, r24
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	21 f0       	breq	.+8      	; 0xd44 <.L1>
     d3c:	a8 01       	movw	r20, r16
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	2e d1       	rcall	.+604    	; 0xfa0 <memset>

00000d44 <.L1>:
     d44:	ce 01       	movw	r24, r28
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <malloc>:
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	9c 01       	movw	r18, r24
     d5a:	02 97       	sbiw	r24, 0x02	; 2
     d5c:	10 f4       	brcc	.+4      	; 0xd62 <.L2>
     d5e:	22 e0       	ldi	r18, 0x02	; 2
     d60:	30 e0       	ldi	r19, 0x00	; 0

00000d62 <.L2>:
     d62:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__flp>
     d66:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__flp+0x1>
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	a0 e0       	ldi	r26, 0x00	; 0

00000d72 <.L3>:
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	91 f4       	brne	.+36     	; 0xd9a <.L9>
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	09 f4       	brne	.+2      	; 0xd7c <L0^A+0x2>

00000d7a <L0^A>:
     d7a:	45 c0       	rjmp	.+138    	; 0xe06 <.L10>
     d7c:	82 1b       	sub	r24, r18
     d7e:	93 0b       	sbc	r25, r19
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	91 05       	cpc	r25, r1
     d84:	b8 f5       	brcc	.+110    	; 0xdf4 <.L11>
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	61 15       	cp	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	69 f1       	breq	.+90     	; 0xdea <.L12>
     d90:	fb 01       	movw	r30, r22
     d92:	93 83       	std	Z+3, r25	; 0x03
     d94:	82 83       	std	Z+2, r24	; 0x02

00000d96 <.L13>:
     d96:	fe 01       	movw	r30, r28
     d98:	11 c0       	rjmp	.+34     	; 0xdbc <.L17>

00000d9a <.L9>:
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	02 81       	ldd	r16, Z+2	; 0x02
     da0:	13 81       	ldd	r17, Z+3	; 0x03
     da2:	42 17       	cp	r20, r18
     da4:	53 07       	cpc	r21, r19
     da6:	f0 f0       	brcs	.+60     	; 0xde4 <.L4>
     da8:	42 17       	cp	r20, r18
     daa:	53 07       	cpc	r21, r19
     dac:	99 f4       	brne	.+38     	; 0xdd4 <.L5>
     dae:	10 97       	sbiw	r26, 0x00	; 0
     db0:	61 f0       	breq	.+24     	; 0xdca <.L6>
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	0c 93       	st	X, r16
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	13 96       	adiw	r26, 0x03	; 3
     dba:	1c 93       	st	X, r17

00000dbc <.L17>:
     dbc:	32 96       	adiw	r30, 0x02	; 2

00000dbe <.L1>:
     dbe:	cf 01       	movw	r24, r30
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <.L6>:
     dca:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <__flp>
     dce:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__flp+0x1>
     dd2:	f4 cf       	rjmp	.-24     	; 0xdbc <.L17>

00000dd4 <.L5>:
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	19 f0       	breq	.+6      	; 0xdde <.L16>
     dd8:	48 17       	cp	r20, r24
     dda:	59 07       	cpc	r21, r25
     ddc:	18 f4       	brcc	.+6      	; 0xde4 <.L4>

00000dde <.L16>:
     dde:	ca 01       	movw	r24, r20
     de0:	bd 01       	movw	r22, r26
     de2:	ef 01       	movw	r28, r30

00000de4 <.L4>:
     de4:	df 01       	movw	r26, r30
     de6:	f8 01       	movw	r30, r16
     de8:	c4 cf       	rjmp	.-120    	; 0xd72 <.L3>

00000dea <.L12>:
     dea:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__flp+0x1>
     dee:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__flp>
     df2:	d1 cf       	rjmp	.-94     	; 0xd96 <.L13>

00000df4 <.L11>:
     df4:	fe 01       	movw	r30, r28
     df6:	e8 0f       	add	r30, r24
     df8:	f9 1f       	adc	r31, r25
     dfa:	21 93       	st	Z+, r18
     dfc:	31 93       	st	Z+, r19
     dfe:	02 97       	sbiw	r24, 0x02	; 2
     e00:	99 83       	std	Y+1, r25	; 0x01
     e02:	88 83       	st	Y, r24
     e04:	dc cf       	rjmp	.-72     	; 0xdbe <.L1>

00000e06 <.L10>:
     e06:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__brkval>
     e0a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__brkval+0x1>
     e0e:	89 2b       	or	r24, r25
     e10:	41 f4       	brne	.+16     	; 0xe22 <.L14>
     e12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__malloc_heap_start>
     e16:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     e1a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__brkval+0x1>
     e1e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__brkval>

00000e22 <.L14>:
     e22:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__malloc_heap_end>
     e26:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__malloc_heap_end+0x1>
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	41 f4       	brne	.+16     	; 0xe3e <.L15>
     e2e:	8d b7       	in	r24, 0x3d	; 61
     e30:	9e b7       	in	r25, 0x3e	; 62
     e32:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     e36:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     e3a:	84 1b       	sub	r24, r20
     e3c:	95 0b       	sbc	r25, r21

00000e3e <.L15>:
     e3e:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <__brkval>
     e42:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <__brkval+0x1>
     e46:	48 17       	cp	r20, r24
     e48:	59 07       	cpc	r21, r25
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <L0^A+0x2>

00000e4c <L0^A>:
     e4c:	b8 cf       	rjmp	.-144    	; 0xdbe <.L1>
     e4e:	84 1b       	sub	r24, r20
     e50:	95 0b       	sbc	r25, r21
     e52:	82 17       	cp	r24, r18
     e54:	93 07       	cpc	r25, r19
     e56:	08 f4       	brcc	.+2      	; 0xe5a <.LLST2>

00000e58 <L0^A>:
     e58:	b2 cf       	rjmp	.-156    	; 0xdbe <.L1>
     e5a:	b9 01       	movw	r22, r18
     e5c:	6e 5f       	subi	r22, 0xFE	; 254
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	86 17       	cp	r24, r22
     e62:	97 07       	cpc	r25, r23
     e64:	08 f4       	brcc	.+2      	; 0xe68 <L0^A+0x2>

00000e66 <L0^A>:
     e66:	ab cf       	rjmp	.-170    	; 0xdbe <.L1>
     e68:	64 0f       	add	r22, r20
     e6a:	75 1f       	adc	r23, r21
     e6c:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <__brkval+0x1>
     e70:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <__brkval>
     e74:	fa 01       	movw	r30, r20
     e76:	21 93       	st	Z+, r18
     e78:	31 93       	st	Z+, r19
     e7a:	a1 cf       	rjmp	.-190    	; 0xdbe <.L1>

00000e7c <free>:
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	9c 01       	movw	r18, r24
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	e9 f0       	breq	.+58     	; 0xec0 <.L18>
     e86:	fc 01       	movw	r30, r24
     e88:	32 97       	sbiw	r30, 0x02	; 2
     e8a:	13 82       	std	Z+3, r1	; 0x03
     e8c:	12 82       	std	Z+2, r1	; 0x02
     e8e:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <__flp>
     e92:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <__flp+0x1>
     e96:	de 01       	movw	r26, r28
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	20 97       	sbiw	r28, 0x00	; 0
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <.L21>
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	28 0f       	add	r18, r24
     ea6:	39 1f       	adc	r19, r25
     ea8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__brkval>
     eac:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__brkval+0x1>
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <L0^A+0x2>

00000eb6 <L0^A>:
     eb6:	67 c0       	rjmp	.+206    	; 0xf86 <.L34>
     eb8:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <__brkval+0x1>
     ebc:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <__brkval>

00000ec0 <.L18>:
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <.L32>:
     ec6:	da 01       	movw	r26, r20

00000ec8 <.L21>:
     ec8:	ae 17       	cp	r26, r30
     eca:	bf 07       	cpc	r27, r31
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <L0^A+0x2>

00000ece <L0^A>:
     ece:	41 c0       	rjmp	.+130    	; 0xf52 <.L23>
     ed0:	12 96       	adiw	r26, 0x02	; 2
     ed2:	4d 91       	ld	r20, X+
     ed4:	5c 91       	ld	r21, X
     ed6:	13 97       	sbiw	r26, 0x03	; 3
     ed8:	cd 01       	movw	r24, r26
     eda:	41 15       	cp	r20, r1
     edc:	51 05       	cpc	r21, r1
     ede:	99 f7       	brne	.-26     	; 0xec6 <.L32>

00000ee0 <.L24>:
     ee0:	dc 01       	movw	r26, r24
     ee2:	13 96       	adiw	r26, 0x03	; 3
     ee4:	fc 93       	st	X, r31
     ee6:	ee 93       	st	-X, r30
     ee8:	12 97       	sbiw	r26, 0x02	; 2
     eea:	4d 91       	ld	r20, X+
     eec:	5d 91       	ld	r21, X+
     eee:	a4 0f       	add	r26, r20
     ef0:	b5 1f       	adc	r27, r21
     ef2:	ea 17       	cp	r30, r26
     ef4:	fb 07       	cpc	r31, r27
     ef6:	81 f4       	brne	.+32     	; 0xf18 <.L26>
     ef8:	20 81       	ld	r18, Z
     efa:	31 81       	ldd	r19, Z+1	; 0x01
     efc:	2e 5f       	subi	r18, 0xFE	; 254
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	24 0f       	add	r18, r20
     f02:	35 1f       	adc	r19, r21
     f04:	dc 01       	movw	r26, r24
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	3c 93       	st	X, r19
     f0a:	2e 93       	st	-X, r18
     f0c:	22 81       	ldd	r18, Z+2	; 0x02
     f0e:	33 81       	ldd	r19, Z+3	; 0x03
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	3c 93       	st	X, r19
     f14:	2e 93       	st	-X, r18
     f16:	12 97       	sbiw	r26, 0x02	; 2

00000f18 <.L26>:
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0

00000f1c <.L27>:
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	b1 f5       	brne	.+108    	; 0xf90 <.L33>
     f24:	fe 01       	movw	r30, r28
     f26:	81 91       	ld	r24, Z+
     f28:	91 91       	ld	r25, Z+
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__brkval>
     f32:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__brkval+0x1>
     f36:	8e 17       	cp	r24, r30
     f38:	9f 07       	cpc	r25, r31
     f3a:	11 f6       	brne	.-124    	; 0xec0 <.L18>
     f3c:	10 97       	sbiw	r26, 0x00	; 0
     f3e:	59 f5       	brne	.+86     	; 0xf96 <.L29>
     f40:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__flp+0x1>
     f44:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__flp>

00000f48 <.L30>:
     f48:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <__brkval+0x1>
     f4c:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <__brkval>
     f50:	b7 cf       	rjmp	.-146    	; 0xec0 <.L18>

00000f52 <.L23>:
     f52:	b3 83       	std	Z+3, r27	; 0x03
     f54:	a2 83       	std	Z+2, r26	; 0x02
     f56:	40 81       	ld	r20, Z
     f58:	51 81       	ldd	r21, Z+1	; 0x01
     f5a:	24 0f       	add	r18, r20
     f5c:	35 1f       	adc	r19, r21
     f5e:	a2 17       	cp	r26, r18
     f60:	b3 07       	cpc	r27, r19
     f62:	71 f4       	brne	.+28     	; 0xf80 <.L25>
     f64:	4e 5f       	subi	r20, 0xFE	; 254
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
     f68:	2d 91       	ld	r18, X+
     f6a:	3c 91       	ld	r19, X
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	42 0f       	add	r20, r18
     f70:	53 1f       	adc	r21, r19
     f72:	51 83       	std	Z+1, r21	; 0x01
     f74:	40 83       	st	Z, r20
     f76:	12 96       	adiw	r26, 0x02	; 2
     f78:	2d 91       	ld	r18, X+
     f7a:	3c 91       	ld	r19, X
     f7c:	33 83       	std	Z+3, r19	; 0x03
     f7e:	22 83       	std	Z+2, r18	; 0x02

00000f80 <.L25>:
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	09 f0       	breq	.+2      	; 0xf86 <.L34>

00000f84 <L0^A>:
     f84:	ad cf       	rjmp	.-166    	; 0xee0 <.L24>

00000f86 <.L34>:
     f86:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <__flp+0x1>
     f8a:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <__flp>
     f8e:	98 cf       	rjmp	.-208    	; 0xec0 <.L18>

00000f90 <.L33>:
     f90:	de 01       	movw	r26, r28
     f92:	ec 01       	movw	r28, r24
     f94:	c3 cf       	rjmp	.-122    	; 0xf1c <.L27>

00000f96 <.L29>:
     f96:	13 96       	adiw	r26, 0x03	; 3
     f98:	1c 92       	st	X, r1
     f9a:	1e 92       	st	-X, r1
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	d4 cf       	rjmp	.-88     	; 0xf48 <.L30>

00000fa0 <memset>:
     fa0:	dc 01       	movw	r26, r24
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <.L_memset_start>

00000fa4 <.L_memset_loop>:
     fa4:	6d 93       	st	X+, r22

00000fa6 <.L_memset_start>:
     fa6:	41 50       	subi	r20, 0x01	; 1
     fa8:	50 40       	sbci	r21, 0x00	; 0
     faa:	e0 f7       	brcc	.-8      	; 0xfa4 <.L_memset_loop>
     fac:	08 95       	ret

00000fae <eeprom_read_byte>:
     fae:	e1 99       	sbic	0x1c, 1	; 28
     fb0:	fe cf       	rjmp	.-4      	; 0xfae <eeprom_read_byte>
     fb2:	9f bb       	out	0x1f, r25	; 31
     fb4:	8e bb       	out	0x1e, r24	; 30
     fb6:	e0 9a       	sbi	0x1c, 0	; 28
     fb8:	99 27       	eor	r25, r25
     fba:	8d b3       	in	r24, 0x1d	; 29
     fbc:	08 95       	ret

00000fbe <_exit>:
     fbe:	f8 94       	cli

00000fc0 <__stop_program>:
     fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>

00000fc2 <L0^A>:
     fc2:	a3 c8       	rjmp	.-3770   	; 0x10a <.L11>
     fc4:	a4 c8       	rjmp	.-3768   	; 0x10e <.L10>
     fc6:	a5 c8       	rjmp	.-3766   	; 0x112 <.L9>
     fc8:	a6 c8       	rjmp	.-3764   	; 0x116 <.L8>
     fca:	a7 c8       	rjmp	.-3762   	; 0x11a <.L7>
     fcc:	a8 c8       	rjmp	.-3760   	; 0x11e <.L6>
     fce:	a9 c8       	rjmp	.-3758   	; 0x122 <.L5>
     fd0:	aa c8       	rjmp	.-3756   	; 0x126 <.L3>

00000fd2 <.L15>:
     fd2:	b2 c8       	rjmp	.-3740   	; 0x138 <.L22>
     fd4:	b3 c8       	rjmp	.-3738   	; 0x13c <.L21>
     fd6:	b4 c8       	rjmp	.-3736   	; 0x140 <.L20>
     fd8:	b5 c8       	rjmp	.-3734   	; 0x144 <.L19>
     fda:	b6 c8       	rjmp	.-3732   	; 0x148 <.L18>
     fdc:	b7 c8       	rjmp	.-3730   	; 0x14c <.L17>
     fde:	b8 c8       	rjmp	.-3728   	; 0x150 <.L16>
     fe0:	b9 c8       	rjmp	.-3726   	; 0x154 <.L14>

00000fe2 <.L32>:
     fe2:	48 cd       	rjmp	.-1392   	; 0xa74 <.L43>
     fe4:	4e cd       	rjmp	.-1380   	; 0xa82 <.L42>
     fe6:	76 cd       	rjmp	.-1300   	; 0xad4 <.L41>
     fe8:	7c cd       	rjmp	.-1288   	; 0xae2 <.L40>
     fea:	a4 cd       	rjmp	.-1208   	; 0xb34 <.L39>
     fec:	aa cd       	rjmp	.-1196   	; 0xb42 <.L38>
     fee:	d2 cd       	rjmp	.-1116   	; 0xb94 <.L37>
     ff0:	d8 cd       	rjmp	.-1104   	; 0xba2 <.L36>
     ff2:	00 ce       	rjmp	.-1024   	; 0xbf4 <.L35>
     ff4:	26 ce       	rjmp	.-948    	; 0xc42 <.L34>
     ff6:	4c ce       	rjmp	.-872    	; 0xc90 <.L33>
     ff8:	52 ce       	rjmp	.-860    	; 0xc9e <.L31>

00000ffa <.L12>:
     ffa:	e2 cb       	rjmp	.-2108   	; 0x7c0 <.L19>
     ffc:	05 cc       	rjmp	.-2038   	; 0x808 <.L18>
     ffe:	28 cc       	rjmp	.-1968   	; 0x850 <.L17>
    1000:	4b cc       	rjmp	.-1898   	; 0x898 <.L16>
    1002:	6e cc       	rjmp	.-1828   	; 0x8e0 <.L15>
    1004:	91 cc       	rjmp	.-1758   	; 0x928 <.L14>
    1006:	b4 cc       	rjmp	.-1688   	; 0x970 <.L13>
    1008:	d7 cc       	rjmp	.-1618   	; 0x9b8 <.L11>
